{"version":3,"file":"static/js/127.74e2e0bc.chunk.js","mappings":"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","sources":["components/SmallSpinner/SmallSpinner.js","components/TranslationPopup/TranslationPopup.js","components/SentencesTable/SentencesTable.js","utils/compareArrays.js","components/AddSentenceModal/AddSentenceModal.js","utils/makeSentense.js","components/ModifySentenceModal/ModifySentenceModal.js","pages/SentencesPage.js"],"sourcesContent":["import './smallSpinner.scss';\n\nconst SmallSpinner = () => {\n    return (\n        <div className=\"dot-spinner\">\n            <div className=\"dot-spinner__dot\"></div>\n            <div className=\"dot-spinner__dot\"></div>\n            <div className=\"dot-spinner__dot\"></div>\n            <div className=\"dot-spinner__dot\"></div>\n            <div className=\"dot-spinner__dot\"></div>\n            <div className=\"dot-spinner__dot\"></div>\n            <div className=\"dot-spinner__dot\"></div>\n            <div className=\"dot-spinner__dot\"></div>\n        </div>\n    )\n}\n\nexport default SmallSpinner;","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport SmallSpinner from '../SmallSpinner/SmallSpinner';\nimport './translationPopup.scss';\n\nconst TranslationPopup = ({translation, position, setVisiblePopup, visiblePopup, isTranslationComplete, handleAddWordModal}) => {\n    \n    const handleOutsideClick = (event) => {\n        if (event.target.tagName !== \"SPAN\") {\n            setVisiblePopup(false);\n        }\n    };\n    \n    useEffect(() => {\n        document.body.addEventListener('click', handleOutsideClick);\n        \n        return () => document.body.removeEventListener('click', handleOutsideClick);\n        // eslint-disable-next-line\n    }, []);\n\n    const elements = (array) => {\n        return array.slice(0, 5).map((item, i) => <div className='result' key={i}><b>{item.english}&nbsp;</b> - {item.russian}</div>)\n    }\n\n    const positionOfPopup = () => {\n        let style;\n\n        if (window.innerWidth/2 > position.left) {\n            style = {\n                top: position.top, \n                left: position.left, \n                transform: 'translate(0, -100%)'\n            }\n        } else {\n            style = {\n                top: position.top, \n                right: window.innerWidth - (position.left + position.width), \n                transform: 'translate(0, -100%)'\n            }\n        }\n        \n        return style\n    }\n\n    const positionOfArrow = () => {\n        let style;\n\n        if (window.innerWidth/2 > position.left) {\n            style = {\n                left: 2,\n                bottom: -2,\n                transform: 'rotate(73deg)'\n            }\n        } else {\n            style = {\n                right: 2,\n                bottom: -2,\n                transform: 'rotate(105deg)'\n            }\n        }\n        \n        return style\n    }\n\n    return (\n        <div \n            className={visiblePopup ? \"translationPopup active\" : \"translationPopup\"} \n            style={positionOfPopup()}\n        >\n            {visiblePopup && (\n                translation.length !== 0 ? \n                <div className=\"translationPopup__content\">\n                    {!isTranslationComplete ? \n                    <SmallSpinner/>\n                    :\n                    elements(translation)\n                    }\n                    {translation.length > 5 ? <div>...</div> : null}\n                    <button onClick={() => handleAddWordModal()} className=\"translationPopup__btn\"/>\n                </div> : \n                <div className='translationPopup__content'>\n                    <div className=\"translationPopup__text\">Unknown word</div>\n                    <button onClick={() => handleAddWordModal()} className=\"translationPopup__btn\"/>\n                </div>\n            )}\n            <div className='translationPopup__arrow' style={positionOfArrow()}></div>\n        </div>\n    )\n}\n\nTranslationPopup.propTypes = {\n    translation:  PropTypes.array.isRequired,\n    position:  PropTypes.object.isRequired,\n    setVisiblePopup:  PropTypes.func.isRequired,\n    visiblePopup:  PropTypes.bool.isRequired,\n    isTranslationComplete:  PropTypes.bool.isRequired, \n    handleAddWordModal:  PropTypes.func.isRequired, \n}\n\nexport default TranslationPopup;","import {Fragment, useEffect, useState} from 'react';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Spinner from '../Spinner/Spinner';\nimport pencil from '../../resources/pencil.png';\nimport TranslationPopup from '../TranslationPopup/TranslationPopup';\nimport buscet from '../../resources/buscet.png';\nimport './sentencesTable.scss';\n\nconst SentencesTable = ({words, items, loadingStatus, setSelectedSentence, cuttedArrayOfSentences, searchedSentences, handleModifyModal, onDeleteSentence, handleAddWordModal, selectedWord, setSelectedWord}) => {\n\n    const [translationResult, setTranslationResult] = useState([]);\n    const [visiblePopup, setVisiblePopup] = useState(false);\n    const [isTranslationComplete, setTranslationComplete] = useState(false);\n    const [position, setPosition] = useState({top: 0, left: 0, right: 0, width: 0});\n\n    const translation = (array) => {\n        let data = [];\n\n        if (!!selectedWord.match(/[^а-я-]/g)) {\n            const regex = new RegExp(\"\\\\b\" + selectedWord + \"(s|es|ed|d|ing)?\\\\b\", \"i\");\n            const ingRegex = new RegExp(\"\\\\b\" + selectedWord.slice(0, -1) + \"ing\\\\b\", \"i\");\n\n            data = array.filter(item => {\n                return regex.test(item.english) || ingRegex.test(item.english);\n            });\n        } else {\n            const regex = new RegExp(`(?:^|\\\\s)${selectedWord.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}(?=\\\\s|$)`, \"iu\");\n\n            data = array.filter(item => {\n                return regex.test(item.russian);\n            }); \n        }\n        \n        return data\n    }\n\n    useEffect(() => {\n        setTranslationResult(translation(words));\n        setTranslationComplete(true);\n        // eslint-disable-next-line\n    }, [isTranslationComplete]);\n    \n    const handleWordClick = (event, word) => {\n        const wordPosition = event.target.getBoundingClientRect();\n        const scrollTop = document.documentElement.scrollTop;\n        setTranslationComplete(false);\n        setTranslationResult(translation(words));\n        setSelectedWord(word);\n        setVisiblePopup(true);\n        setPosition({ top: wordPosition.top + scrollTop, left: wordPosition.left, right: wordPosition.right, width: wordPosition.width });\n    }\n\n    const sentence = (array) => {\n        return array.map((item, i) => {\n\n            const firstWord = i === 0 ? item.slice(0, 1).toUpperCase() + item.slice(1) : item;\n\n            let itemWithSpace;\n\n            switch (item) {\n                case \",\":\n                    itemWithSpace = <>{item}&nbsp;</>\n                break;\n                case \".\":\n                    itemWithSpace = <>{item}</>\n                break;\n                case \"-\":\n                    itemWithSpace = <>&nbsp;{item}</>\n                break;\n                default:\n                    itemWithSpace = i === 0 ? \n                                        <>\n                                            <span \n                                                onClick={(e) => handleWordClick(e, item)} \n                                                className={searchedSentences.includes(item) ? 'sentence__word highlighted' : 'sentence__word'}\n                                            >\n                                                {firstWord}\n                                            </span>\n                                        </> : \n                                        <>\n                                            <>&nbsp;</>\n                                            <span \n                                                onClick={(e) => handleWordClick(e, item)} \n                                                className={searchedSentences.includes(item) ? 'sentence__word highlighted' : 'sentence__word'}\n                                            >\n                                                {firstWord}\n                                            </span>\n                                        </>\n            \n            }\n\n            return (\n                <Fragment key={i}>\n                    {itemWithSpace}\n                </Fragment>\n            )\n        })\n    }\n\n    const elements = cuttedArrayOfSentences.map(item => {\n\n        return (\n            <CSSTransition \n                    timeout={500}\n                    key={item.id}\n                    classNames={{\n                        appear: 'sentence-appear',\n                        appearActive: 'sentence-appear-active',\n                        enter: 'sentence-enter',\n                        enterActive: 'sentence-enter-active',\n                        exit: 'sentence-exit',\n                        exitActive: 'sentence-exit-active'\n                    }}\n                >\n                    <ul className='sentence' onClick={() => setSelectedSentence(item)}>\n                        <li className='sentenceTable__leftItem'>\n                            <div className='sentence'>{sentence(item.english)}</div>\n                        </li>\n                        <li className='sentenceTable__rightItem'>\n                            <div className='sentence'>{sentence(item.russian)}</div>\n                        </li>\n                        <div onClick={() => onDeleteSentence(item.id)} className='sentenceTable__buscet'>\n                                <img src={buscet} alt='delete buscet'/>\n                        </div> \n                        <div onClick={() => handleModifyModal()} className='sentenceTable__pencil'>\n                                <img src={pencil} alt='modify pencil'/>\n                        </div> \n                    </ul>\n            </CSSTransition>\n        )\n    })\n\n    const table = () => {\n\n        if (items.length === 0) {\n            return (\n                <div className='emptyTable'>You have not added sentences yet!</div>\n            )\n        }\n\n        if ((cuttedArrayOfSentences.length === 0 && searchedSentences.length > 0)) {\n            return (\n                <div className='emptyTable'>No searched sentence!</div>\n            )\n        }\n\n        return (\n            <div className='sentenceTable'>\n                <TransitionGroup component=\"div\" className='sentenceTable__wrapper'>\n                    {elements}\n                </TransitionGroup>\n            </div>\n        )\n    }\n    \n    if (loadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (loadingStatus === \"error\") {\n        return <div className='error'>Something went wrong, error from server</div>\n    }\n    \n    return (\n        <>\n            {table()}\n            {visiblePopup && \n            <TranslationPopup \n                isTranslationComplete={isTranslationComplete}\n                position={position} \n                visiblePopup={visiblePopup} \n                setVisiblePopup={setVisiblePopup} \n                handleAddWordModal={handleAddWordModal}\n                translation={translationResult}\n            />}\n        </>\n    )\n}\n\nSentencesTable.propTypes = {\n    words:  PropTypes.array.isRequired,\n    items:  PropTypes.array.isRequired,\n    loadingStatus:  PropTypes.string.isRequired,\n    setSelectedSentence:  PropTypes.func.isRequired,\n    cuttedArrayOfSentences:  PropTypes.array.isRequired, \n    searchedSentences:  PropTypes.string.isRequired, \n    handleModifyModal:  PropTypes.func.isRequired,\n    onDeleteSentence:  PropTypes.func.isRequired, \n    handleAddWordModal:  PropTypes.func.isRequired, \n    selectedWord:  PropTypes.string.isRequired,\n    setSelectedWord:  PropTypes.func.isRequired,\n}\n\nexport default SentencesTable;","const compareArrays = (arr1, arr2) => {\n\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    \n    for (let i = 0; i < arr1.length; i++) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n  \n    return true;\n}\n\nexport default compareArrays;","import database from \"../../firebase\";\nimport { setDoc, collection, doc } from \"firebase/firestore\"; \nimport { v4 as uuidv4 } from 'uuid';\nimport { useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport compareArrays from '../../utils/compareArrays';\nimport PropTypes from 'prop-types';\nimport './addSentenceModal.scss';\n\nconst AddSentenceModal = ({width, height, maxLength, active, setActive, address, func, items, setMessage, setShowMessage}) => {\n\n    const [english, setEnglish] = useState('');\n    const [russian, setRussian] = useState('');\n    \n    const dispatch = useDispatch();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const englishArray = english.toLowerCase().split(/([ ,.]+)/).map(item=> item.trim()).filter(item => item !== ' ' && item !== '')\n        const russianArray = russian.toLowerCase().split(/([ ,.]+)/).map(item=> item.trim()).filter(item => item !== ' ' && item !== '')\n        \n        const englishIndex = items.findIndex(item => (compareArrays(item.english, englishArray)))\n\n        if (englishIndex === -1) {\n\n            const newObj = {\n                english: englishArray,\n                russian: russianArray,\n                date: Date.now(),\n                id: uuidv4()\n            }\n            \n            dispatch(func(newObj));\n\n            const colRef = collection(database, address.firstUrl, address.secondUrl, address.thirdUrl)\n            setDoc(doc(colRef, newObj.id), newObj);\n            \n            setShowMessage(true);\n            setMessage({\n                text: \"It's was successfully added!\",\n                color: 'green'\n            })\n\n            setEnglish('');\n            setRussian('');\n            setActive(false);\n        } else {\n            setShowMessage(true);\n            setMessage({\n                text: \"It's already there!\",\n                color: 'red'\n            })\n\n            setEnglish('');\n            setRussian('');\n        }\n    }\n\n    const handleEnterPress = (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    };\n\n    return (\n        <>\n            <div className={active ? \"addSentenceModal active\" : \"addSentenceModal\"} onClick={() => setActive(false)}>\n                <div \n                    style={{width: `${width}px`, height: `${height}px`}}\n                    className={active ? \"addSentenceModal__content active\" : \"addSentenceModal__content\"} \n                    onClick={e => e.stopPropagation()}\n                    onKeyDown={handleEnterPress}\n                >\n                    <form className='addSentenceModal__form' onSubmit={handleSubmit}>\n                        <div className='addSentenceModal__title'>Add new sentence</div>\n\n                        <label htmlFor=\"english\">English</label>\n                        <textarea \n                            value={english}\n                            maxLength={maxLength}\n                            onChange={(e) => setEnglish(e.target.value.replace(/[^a-zA-Z.,!?\\- ]/g, ''))}\n                            type=\"text\" \n                            id='english' \n                            placeholder='Write here' \n                            required\n                        />\n\n                        <label htmlFor=\"russian\">Russian</label>\n                        <textarea \n                            value={russian}\n                            maxLength={maxLength}\n                            onChange={(e) => setRussian(e.target.value.replace(/[^а-яА-Я.,!?\\- ]/g, ''))}\n                            type=\"text\" \n                            id='russian' \n                            placeholder='Write here' \n                            required\n                        />\n\n                        <div className='addSentenceModal__btns'>\n                            <button \n                                className='addSentenceModal__closebtn' \n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    setActive(false);\n                                }}    \n                            >\n                                Close\n                            </button>\n                            <button className='addSentenceModal__btn' type='submit'>Add</button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </>        \n    )\n}\n\nAddSentenceModal.propTypes = {\n    width:  PropTypes.number.isRequired,\n    height:  PropTypes.number.isRequired,\n    maxLength:  PropTypes.number.isRequired,\n    active:  PropTypes.bool.isRequired,\n    setActive:  PropTypes.func.isRequired, \n    address:  PropTypes.object.isRequired, \n    func:  PropTypes.func,\n    items:  PropTypes.array.isRequired, \n    setMessage:  PropTypes.func.isRequired, \n    setShowMessage:  PropTypes.func.isRequired\n}\n\nexport default AddSentenceModal;","const makeSentence = (array) => {\n    return array\n                .join(' ')\n                .charAt(0)\n                .toUpperCase() + \n           array\n                .join(' ')\n                .slice(1)\n                .replace(/\\s*([,.])/g, \"$1\");\n}\n\nexport default makeSentence;","import database from \"../../firebase\";\nimport { setDoc, collection, doc } from \"firebase/firestore\"; \nimport { useEffect, useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport makeSentence from \"../../utils/makeSentense\";\nimport compareArrays from \"../../utils/compareArrays\";\nimport './modifySentenceModal.scss';\n\nconst ModifySentenceModal = ({width, height, maxLength, active, setActive, address, func, items,  selected, setMessage, setShowMessage}) => {\n    \n    const dataForModify = items.find(item => item.id === selected.id);\n\n    const [english, setEnglish] = useState('');\n    const [russian, setRussian] = useState('');\n    \n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (dataForModify !== undefined) {\n            setEnglish(makeSentence(dataForModify.english));\n            setRussian(makeSentence(dataForModify.russian));\n        }\n    }, [dataForModify])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        const englishArray = english.toLowerCase().split(/([ ,.]+)/).map(item=> item.trim()).filter(item => item !== ' ' && item !== '')\n        const russianArray = russian.toLowerCase().split(/([ ,.]+)/).map(item=> item.trim()).filter(item => item !== ' ' && item !== '')\n        \n        const englishIndex = items.findIndex(item => (compareArrays(item.english, englishArray)))\n        \n        if (englishIndex === -1) {\n            \n            const obj = {\n                english: englishArray,\n                russian: russianArray,\n                id: dataForModify.id,\n                date: dataForModify.date\n            }\n            \n            dispatch(func(obj));\n\n            setActive(false);\n\n            const colRef = collection(database, address.firstUrl, address.secondUrl, address.thirdUrl)\n            setDoc(doc(colRef, obj.id), obj);\n\n            setShowMessage(true);\n            setMessage({\n                text: \"It's was successfully modifyied!\",\n                color: 'green'\n            })\n        } else {\n            setShowMessage(true);\n            setMessage({\n                text: \"It's already there!\",\n                color: 'red'\n            })\n        }\n    }\n\n    const handleEnterPress = (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    };\n\n    return (\n        <div className={active ? \"modifySentenceModal active\" : \"modifySentenceModal\"} onClick={() => setActive(false)}>\n            <div \n                style={{width: `${width}px`, height: `${height}px`}}\n                className={active ? \"modifySentenceModal__content active\" : \"modifySentenceModal__content\"} \n                onClick={e => e.stopPropagation()}\n                onKeyDown={handleEnterPress}\n            >\n                <form className='modifySentenceModal__form' onSubmit={handleSubmit}>\n                    <div className='modifySentenceModal__title'>Modify sentence</div>\n\n                    <label htmlFor=\"english\">English</label>\n                    <textarea \n                        value={english}\n                        maxLength={maxLength}\n                        onChange={(e) => setEnglish(e.target.value.replace(/[^a-zA-Z.,!?\\- ]/g, ''))}\n                        type=\"text\" \n                        id='english' \n                        placeholder='Write here' \n                        required/>\n\n                    <label htmlFor=\"russian\">Russian</label>\n                    <textarea \n                        value={russian}\n                        maxLength={maxLength}\n                        onChange={(e) => setRussian(e.target.value.replace(/[^а-яА-Я.,!?\\- ]/g, ''))}\n                        type=\"text\" \n                        id='russian' \n                        placeholder='Write here' \n                        required/>\n\n                    <div className='modifySentenceModal__btns'>\n                        <button \n                            className='modifySentenceModal__closebtn' \n                            onClick={(e) => {\n                                e.preventDefault();\n                                setActive(false);\n                            }}    \n                        >\n                            Close\n                        </button>\n                        <button className='modifySentenceModal__btn' type='submit'>Modify</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nModifySentenceModal.propTypes = {\n    width:  PropTypes.number.isRequired,\n    height:  PropTypes.number.isRequired,\n    maxLength:  PropTypes.number.isRequired,\n    active:  PropTypes.bool.isRequired,\n    setActive:  PropTypes.func.isRequired, \n    address:  PropTypes.object.isRequired, \n    func:  PropTypes.func,\n    items:  PropTypes.array.isRequired, \n    setMessage:  PropTypes.func.isRequired, \n    setShowMessage:  PropTypes.func.isRequired,\n    selected: PropTypes.object.isRequired\n}\n\nexport default ModifySentenceModal;","import { useEffect, useState } from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { Helmet } from \"react-helmet\";\nimport database from \"../firebase\";\nimport useAuth from '../hooks/use-auth';\nimport {fetchSentences, sortBy, activeSortTypeChanged, addSentence, modifySentence, setTotalPages, setSentencesPerUpload, setPage, deleteSentence} from '../store/slices/sentencesSlice';\nimport {fetchWords, addWord} from '../store/slices/wordSlice';\nimport {deleteDoc, collection, doc} from \"firebase/firestore\"; \nimport Navigation from \"../components/Navigation/Navigation\";\nimport SentencesTable from \"../components/SentencesTable/SentencesTable\";\nimport SortAndActions from '../components/SortAndActions/SortAndActions';\nimport Message from '../components/Message/Message';\nimport AddSentenceModal from '../components/AddSentenceModal/AddSentenceModal';\nimport AddWordModal from '../components/AddWordModal/AddWordModal';\nimport ModifySentenceModal from '../components/ModifySentenceModal/ModifySentenceModal';\nimport ArrowScrollUp from '../components/ArrowScrollUp/ArrowScrollUp';\nimport Footer from '../components/Footer/Footer';\n\nconst SentencesPage = () => {\n\n    const {sentencesLoadingStatus, sentences, sentencesPerUpload, sortType, currentPage, totalPages} = useSelector(state => state.sentences);\n    const {words} = useSelector(state => state.words);\n\n    const [addWordModalActive, setAddWordModalActive] = useState(false);\n    const [addModalActive, setAddModalActive] = useState(false);\n    const [modifyModalActive, setModifyModalActive] = useState(false);\n\n    const [message, setMessage] = useState({});\n    const [showMessage, setShowMessage] = useState(false);\n\tconst [offset, setOffset] = useState(30);\n\n    const [cuttedArrayOfSentences, setCuttedArrayOfSentences] = useState([]);\n    const [filteredArrayLength, setFilteredArrayLength] = useState(0);\n    const [selectedSentence, setSelectedSentence] = useState({});\n    const [searchedSentences, setSearchedSentences] = useState('');\n    const [selectedWord, setSelectedWord] = useState('');\n\n    const dispatch = useDispatch();\n    const {isAuth, id} = useAuth();\n    \n    const sortItems = [\n        { name: 'from new'},\n        { name: 'from old'},         \n    ];\n    \n    const numberOfSentencesPerPage = [\n        { name: 10},\n        { name: 20},\n        { name: 30},      \n    ];\n\n    const linkToSentences = {\n        firstUrl: 'users',\n        secondUrl: id,\n        thirdUrl: 'sentences'\n    }\n\n    const linkToWords = {\n        firstUrl: 'users',\n        secondUrl: id,\n        thirdUrl: 'words'\n    }\n\n    useEffect(() => {\n        if (id !== null) {\n            dispatch(fetchSentences(id));\n            dispatch(fetchWords(id));\n        }\n        // eslint-disable-next-line\n    }, [id]);\n\n    useEffect(() => {\n        if (!!activeSortTypeChanged) {\n            dispatch(sortBy(sortType))\n        } \n        // eslint-disable-next-line\n    }, [sortType, sentences])\n\n    useEffect(() => {\n        if (addModalActive || modifyModalActive || addWordModalActive) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = 'auto';\n        }\n        // eslint-disable-next-line\n    }, [addModalActive, modifyModalActive, addWordModalActive]);\n\n    useEffect(() => {\n        const handleKeyPress = (event) => {\n            if (event.key === 'Escape') {\n                setAddModalActive(false);\n                setModifyModalActive(false)\n            }\n        };\n    \n        document.addEventListener('keydown', handleKeyPress);\n    \n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n        };\n    }, []);\n\n    useEffect(() => {\n        setSelectedSentence({});\n        // eslint-disable-next-line\n    }, [searchedSentences.length]);\n\n    useEffect(() => {\n        setOffset(sentencesPerUpload * currentPage)\n        // eslint-disable-next-line\n    }, [currentPage]);\n    \n    useEffect(() => {\n        if (searchedSentences.length > 0) {\n            if (!(filteredArrayLength % sentencesPerUpload)) {\n                dispatch(setTotalPages(filteredArrayLength/sentencesPerUpload))\n            } else {\n                dispatch(setTotalPages(Math.ceil((filteredArrayLength/sentencesPerUpload))))\n            }\n        } else {\n            if (!(sentences.length % sentencesPerUpload)) {\n                dispatch(setTotalPages(sentences.length/sentencesPerUpload))\n            } else {\n                dispatch(setTotalPages(Math.ceil((sentences.length/sentencesPerUpload))))\n            }\n        }\n        // eslint-disable-next-line\n    }, [sentences, sentencesPerUpload, searchedSentences.length, filteredArrayLength, totalPages])\n\n    useEffect(() => {\n        let lastIndex = currentPage * sentencesPerUpload;\n        let firstIndex = lastIndex - sentencesPerUpload;\n\n        if (searchedSentences.length > 0) {\n            setCuttedArrayOfSentences(filteredArray(sentences).slice(firstIndex, lastIndex));\n        } else {\n            setCuttedArrayOfSentences(sentences.slice(firstIndex, lastIndex));\n        }\n        // eslint-disable-next-line\n    }, [sentences, offset, searchedSentences.length, sentencesPerUpload, currentPage]);\n    \n    const filteredArray = (array) => {\n\n        let data = [];\n        \n        if (searchedSentences.length > 0) {\n            const searchWords = searchedSentences.split(' ');\n            const englishPattern = /^[A-Za-z\\s!.,?-]+$/;\n\n            if (englishPattern.test(searchedSentences)) {\n                data = array.filter(item => searchWords.every(word => item.english.some(element => element.includes(word))));\n            } else {\n                data = array.filter(item => searchWords.every(word => item.russian.some(element => element.includes(word))));\n            }\n        }\n        \n        setFilteredArrayLength(data.length)\n\n        return data;\n    }\n    \n    const onDeleteSentence = (id) => {\n        const sentencesColRef = collection(database, linkToSentences.firstUrl, linkToSentences.secondUrl, linkToSentences.thirdUrl)\n        \n        if (window.confirm('Are you sure?')) {\n\n            dispatch(deleteSentence(id));\n            \n            deleteDoc(doc(sentencesColRef, id));                \n\n            setSelectedSentence({})\n\n            setShowMessage(true)\n            setMessage({\n                text: \"The word was successfully deleted!\",\n                color: 'green'\n            })\n        }\n    }\n\n    const handleAddModal = () => {\n        setAddModalActive(!addModalActive);\n    }\n\n    const handleModifyModal = () => {\n        if (selectedSentence !== undefined) {\n            setModifyModalActive(!modifyModalActive);\n        } else {\n            setShowMessage(true);\n            setMessage({\n                text: \"Choose the word!\",\n                color: 'red'\n            })\n        }\n    }\n\n    const handleAddWordModal = () => {\n        setAddWordModalActive(!addWordModalActive);\n    }\n\n    const switchToFirstPage = () => {\n        dispatch(setPage(1))\n    }\n    \n    return isAuth ? (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"sentences page\"\n                />\n                <title>Sentences</title>\n            </Helmet>\n            <Navigation \n                items={sentences}\n                setSearched={setSearchedSentences}\n                setOffset={setOffset}\n                numberPerUpload={sentencesPerUpload}\n            />\n            <SortAndActions\n                items={cuttedArrayOfSentences}\n                handleAddModal={handleAddModal}\n                filteredArrayLength={filteredArrayLength}\n                sortItems={sortItems}\n                active={sortType}\n                textForSelectPopup={\"Sort by:\"}\n                dispatchFunction={sortBy}\n                activeTypeChanged={activeSortTypeChanged}\n                address={linkToSentences}\n            />\n            <SentencesTable \n                words={words}\n                items={sentences}\n                loadingStatus={sentencesLoadingStatus}\n                setSelectedSentence={setSelectedSentence}\n                selectedSentence={selectedSentence}\n                cuttedArrayOfSentences={cuttedArrayOfSentences}\n                searchedSentences={searchedSentences}\n                handleModifyModal={handleModifyModal}\n                onDeleteSentence={onDeleteSentence}\n                handleAddWordModal={handleAddWordModal}\n                selectedWord={selectedWord}\n                setSelectedWord={setSelectedWord}\n            />\n            <Footer\n                cuttedArray={cuttedArrayOfSentences}\n                filteredArrayLength={filteredArrayLength}\n                numberPerUpload={sentencesPerUpload}\n                currentPage={currentPage}\n                totalPages={totalPages}\n                setPage={setPage}\n                numberOfItemsPerPage={numberOfSentencesPerPage}\n                active={sentencesPerUpload}\n                textForSelectPopup={\"On the page:\"}\n                textForCounters={\"sentences\"}\n                dispatchFunction={setSentencesPerUpload}\n                switchToFirstPage={switchToFirstPage}\n                loadingStatus={sentencesLoadingStatus}\n                items={sentences}\n            />\n            <AddSentenceModal \n                width={600}\n                height={310}\n                maxLength={190}\n                active={addModalActive} \n                setActive={setAddModalActive} \n                address={linkToSentences}\n                func={addSentence}\n                items={sentences}\n                setShowMessage={setShowMessage}\n                setMessage={setMessage}\n            />\n            <AddWordModal \n                width={290}\n                height={230}\n                maxLength={30}\n                active={addWordModalActive} \n                setActive={setAddWordModalActive} \n                address={linkToWords}\n                func={addWord}\n                items={words}\n                setShowMessage={setShowMessage}\n                setMessage={setMessage}\n                selectedWord={selectedWord}\n            />\n            <ModifySentenceModal\n                width={600}\n                height={310}\n                maxLength={190}\n                active={modifyModalActive} \n                setActive={setModifyModalActive} \n                address={linkToSentences}\n                func={modifySentence}\n                items={sentences}\n                selected={selectedSentence}\n                setShowMessage={setShowMessage}\n                setMessage={setMessage}\n            />\n            <Message \n                message={message.text} \n                showMessage={showMessage} \n                setShowMessage={setShowMessage}\n                color={message.color}\n            />\n            <ArrowScrollUp/>\n        </>\n    ) : null\n}\n\nexport default SentencesPage;"],"names":["_jsxs","className","children","_jsx","_ref","translation","position","setVisiblePopup","visiblePopup","isTranslationComplete","handleAddWordModal","handleOutsideClick","event","target","tagName","useEffect","document","body","addEventListener","removeEventListener","array","style","window","innerWidth","left","top","transform","right","width","length","slice","map","item","i","english","russian","SmallSpinner","onClick","bottom","words","items","loadingStatus","setSelectedSentence","cuttedArrayOfSentences","searchedSentences","handleModifyModal","onDeleteSentence","selectedWord","setSelectedWord","_useState","useState","_useState2","_slicedToArray","translationResult","setTranslationResult","_useState3","_useState4","_useState5","_useState6","setTranslationComplete","_useState7","_useState8","setPosition","data","match","regex","RegExp","ingRegex","filter","test","concat","replace","handleWordClick","word","wordPosition","getBoundingClientRect","scrollTop","documentElement","sentence","itemWithSpace","firstWord","toUpperCase","_Fragment","e","includes","Fragment","elements","CSSTransition","timeout","classNames","appear","appearActive","enter","enterActive","exit","exitActive","id","src","alt","pencil","Spinner","TransitionGroup","component","TranslationPopup","arr1","arr2","height","maxLength","active","setActive","address","func","setMessage","setShowMessage","setEnglish","setRussian","dispatch","useDispatch","handleSubmit","preventDefault","englishArray","toLowerCase","split","trim","russianArray","findIndex","compareArrays","newObj","date","Date","now","uuidv4","colRef","collection","database","firstUrl","secondUrl","thirdUrl","setDoc","doc","text","color","stopPropagation","onKeyDown","key","onSubmit","htmlFor","value","onChange","type","placeholder","required","join","charAt","selected","dataForModify","find","undefined","makeSentence","obj","_useSelector","useSelector","state","sentences","sentencesLoadingStatus","sentencesPerUpload","sortType","currentPage","totalPages","addWordModalActive","setAddWordModalActive","addModalActive","setAddModalActive","modifyModalActive","setModifyModalActive","message","_useState9","_useState10","showMessage","_useState11","_useState12","offset","setOffset","_useState13","_useState14","setCuttedArrayOfSentences","_useState15","_useState16","filteredArrayLength","setFilteredArrayLength","_useState17","_useState18","selectedSentence","_useState19","_useState20","setSearchedSentences","_useState21","_useState22","_useAuth","useAuth","isAuth","linkToSentences","linkToWords","fetchSentences","fetchWords","activeSortTypeChanged","sortBy","overflow","handleKeyPress","setTotalPages","Math","ceil","lastIndex","firstIndex","filteredArray","searchWords","every","some","element","Helmet","name","content","Navigation","setSearched","numberPerUpload","SortAndActions","handleAddModal","sortItems","textForSelectPopup","dispatchFunction","activeTypeChanged","SentencesTable","sentencesColRef","confirm","deleteSentence","deleteDoc","Footer","cuttedArray","setPage","numberOfItemsPerPage","textForCounters","setSentencesPerUpload","switchToFirstPage","AddSentenceModal","addSentence","AddWordModal","addWord","ModifySentenceModal","modifySentence","Message","ArrowScrollUp"],"sourceRoot":""}