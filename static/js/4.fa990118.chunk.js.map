{"version":3,"file":"static/js/4.fa990118.chunk.js","mappings":"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","sources":["components/ModifyWordModal/ModifyWordModal.js","components/AlphabetFilter/AlphabetFilter.js","components/FlashCards/FlashCards.js","components/WordsQuiz/WordsQuiz.js","components/QuizModal/QuizModal.js","components/TableSetting/TableSetting.js","components/WordsNavigation/WordsNavigation.js","hooks/useFilteredArray.js","pages/Page.js"],"sourcesContent":["import database from \"../../firebase\";\nimport { setDoc, collection, doc } from \"firebase/firestore\"; \nimport { useEffect, useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport PropTypes from 'prop-types';\nimport './modifyWordModal.scss';\n\nconst ModifyWordModal = ({width, height, maxLength, active, setActive, address, func, items,  selected, setMessage, setShowMessage}) => {\n    \n    const dataForModify = items.find(item => item.id === selected.id);\n\n    const [english, setEnglish] = useState('');\n    const [russian, setRussian] = useState('');\n    \n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (dataForModify !== undefined) {\n            setEnglish(dataForModify.english);\n            setRussian(dataForModify.russian);\n        }\n    }, [dataForModify])\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const favoriteColRef = collection(database, address.firstUrl, address.secondUrl, 'favoriteWords')\n        const wordsColRef = collection(database, address.firstUrl, address.secondUrl, 'words')\n        \n        const index = items.findIndex(e => e.english === english.toLowerCase());\n        \n        if (index === -1) {\n            \n            const obj = {\n                favorite : dataForModify.favorite,\n                english: english.toLowerCase(),\n                russian: russian.toLowerCase(),\n                id: dataForModify.id,\n                date: dataForModify.date\n            }\n            \n            dispatch(func(obj));\n            setActive(false);\n\n            if (dataForModify.favorite) {\n                setDoc(doc(favoriteColRef, obj.id), obj);\n                setDoc(doc(wordsColRef, obj.id), obj);\n            } else {\n                setDoc(doc(wordsColRef, obj.id), obj);\n            }\n\n            setShowMessage(true);\n            setMessage({\n                text: \"It's was successfully modifyied!\",\n                color: 'green'\n            })\n        } else {\n            setShowMessage(true);\n            setMessage({\n                text: \"It's already there!\",\n                color: 'red'\n            })\n        }\n    }\n\n    const handleEnterPress = (e) => {\n        if (e.key === 'Enter') {\n            e.preventDefault();\n            handleSubmit(e);\n        }\n    };\n\n    return (\n        <div className={active ? \"modifymodal active\" : \"modifymodal\"} onClick={() => setActive(false)}>\n            <div \n                style={{width: `${width}px`, height: `${height}px`}}\n                className={active ? \"modifymodal__content active\" : \"modifymodal__content\"} \n                onClick={e => e.stopPropagation()}\n                onKeyDown={handleEnterPress}\n            >\n                <form className='modifymodal__form' onSubmit={handleSubmit}>\n                    <div className='modifymodal__title'>Modify word</div>\n\n                    <label htmlFor=\"english\">English</label>\n                    <input \n                        value={english}\n                        maxLength={maxLength}\n                        onChange={(e) => setEnglish(e.target.value.replace(/[^a-z- ]/g, ''))}\n                        type=\"text\" \n                        id='english' \n                        placeholder='Write here' \n                        required/>\n\n                    <label htmlFor=\"russian\">Russian</label>\n                    <input \n                        value={russian}\n                        maxLength={maxLength}\n                        onChange={(e) => setRussian(e.target.value.replace(/[^а-я- ]/g, ''))}\n                        type=\"text\" \n                        id='russian' \n                        placeholder='Write here' \n                        required/>\n\n                    <div className='modifymodal__btns'>\n                        <button \n                            className='modifymodal__closebtn' \n                            onClick={(e) => {\n                                e.preventDefault();\n                                setActive(false);\n                            }}    \n                        >\n                            Close\n                        </button>\n                        <button className='modifymodal__btn' type='submit'>Modify</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nModifyWordModal.propTypes = {\n    width:  PropTypes.number.isRequired,\n    height:  PropTypes.number.isRequired,\n    maxLength:  PropTypes.number.isRequired,\n    active:  PropTypes.bool.isRequired,\n    setActive:  PropTypes.func.isRequired, \n    address:  PropTypes.object.isRequired, \n    func:  PropTypes.func,\n    items:  PropTypes.array.isRequired, \n    setMessage:  PropTypes.func.isRequired, \n    setShowMessage:  PropTypes.func.isRequired,\n    selected: PropTypes.object.isRequired\n}\n\nexport default ModifyWordModal;","import { Fragment, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport all from '../../resources/all.png';\nimport ru from '../../resources/ru.png';\nimport en from '../../resources/en.png';\nimport arrow from '../../resources/arrow.png';\nimport './alphabetFilter.scss';\n\nconst AlpabetFilter = ({searchedWord, setLetter, letter, setOffset, wordsPerUpload, onClearLetter, switchToFirstPage, items}) => {\n\n    const [switcher, setSwitcher] = useState(true);\n\n    const dispatch = useDispatch();\n\n    const englishAlphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    const russianAlphabet = ['а', 'б', 'в', 'г', 'д', 'е', 'ё', 'ж', 'з', 'и', 'й', 'к', 'л', 'м', 'н', 'о', 'п', 'р', 'с', 'т', 'у', 'ф', 'х', 'ц', 'ч', 'ш', 'щ', 'э', 'ю', 'я'];\n\n    const handleSelectLetter = (item) => {\n        setOffset(wordsPerUpload);\n        dispatch(setLetter(item));\n        switchToFirstPage();\n    }\n\n    const handleSwitchAlphabet = () => {\n        setSwitcher(!switcher);\n    }\n    \n    const elements = (array => {\n        return array.map((item, i) => {\n            return (\n                <Fragment key={i}>\n                    <div \n                        className={item === letter ? 'alphabet__letter activeLetter' : 'alphabet__letter'} \n                        onClick={() => handleSelectLetter(item, i)}\n                    >\n                        {item}\n                    </div>\n                    <div className='alphabet__dot'>&bull;</div>\n                </Fragment>\n            )\n        })\n    })\n    \n    return (\n        <div className='alphabet'>\n            {searchedWord.length === 0 && items.length !== 0 ? \n            <div className='alphabet__wrapper'>\n                <div className='alphabet__switcher' onClick={() => handleSwitchAlphabet()}>\n                    {switcher ? \n                    <>\n                        <img src={en} alt=\"english alphabet icon\"/>\n                        <img src={arrow} alt=\"arrow\"/>\n                        <img src={ru} alt=\"russian alphabet icon\"/>\n                    </>  :\n                    <>\n                        <img src={ru} alt=\"russian alphabet icon\"/>\n                        <img src={arrow} alt=\"arrow\"/>\n                        <img src={en} alt=\"english alphabet icon\"/>\n                    </> \n                    }\n                </div>\n                <div className='alphabet__dot'>&bull;</div>\n                {switcher ? elements(englishAlphabet) : elements(russianAlphabet)}\n                <div className='alphabet__all' onClick={() => onClearLetter()}>\n                    <img src={all} alt=\"all words\"/>\n                </div>\n            </div> : null\n            }\n        </div>\n    )\n}\n\nAlpabetFilter.propTypes = {\n    setLetter:  PropTypes.func.isRequired,\n    setOffset:  PropTypes.func.isRequired,\n    wordsPerUpload:  PropTypes.number.isRequired,\n    onClearLetter:  PropTypes.func.isRequired,\n    switchToFirstPage:  PropTypes.func.isRequired, \n}\n\nexport default AlpabetFilter;","import { useEffect, useState, Fragment, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport rightArrow from '../../resources/rightarrow.png';\nimport leftArrow from '../../resources/leftarrow.png';\nimport './flashCards.scss';\nimport Spinner from '../Spinner/Spinner';\n\nconst FlashCards = ({setActive, setVariant, items, loadingStatus}) => {\n\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [isReversedCard, setIsReversedCard] = useState(false);\n    const [arrayOfCards, setArrayOfCards] = useState([]);\n    const [indexOfCard, setIndexOfCard] = useState(0);\n    const timerRef = useRef(null)\n\n    useEffect(() => {\n        let copiedArray = [...items];\n\n        for (let i = copiedArray.length - 1; i > 0; i--) {\n            let randomIndex = getRandomIndex(0, i);\n            let temp = copiedArray[i];\n            copiedArray[i] = copiedArray[randomIndex];\n            copiedArray[randomIndex] = temp;\n        }\n\n        setArrayOfCards(copiedArray);\n        // eslint-disable-next-line\n    }, [items.length])\n\n    useEffect(() => () => clearTimeout(timerRef.current), [indexOfCard])\n    \n    const handleCardClick = () => {\n        setIsFlipped(!isFlipped);\n    }\n\n    const getRandomIndex = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    const handleNextClick = () => {\n        setIsFlipped(false);\n\n        timerRef.current = setTimeout(() => {\n            setIndexOfCard(indexOfCard + 1);\n        }, 300);\n    }\n\n    const handlePrevClick = () => {\n        setIsFlipped(false);\n\n        timerRef.current = setTimeout(() => {\n            setIndexOfCard(indexOfCard - 1);\n        }, 300);\n    }\n    \n    const cards =(array) => {\n        if (array.length === 0) {\n            return null;\n        }\n        return [array[indexOfCard]].map((item, i) => {\n            return (\n                <Fragment key={i}>\n                    {!isReversedCard ? \n                        <>\n                            <div className='flashcards__front'><span>{item.english}</span></div>\n                            <div className='flashcards__back'><span>{item.russian}</span></div>\n                        </>\n                        :\n                        <>\n                            <div className='flashcards__front'><span>{item.russian}</span></div>\n                            <div className='flashcards__back'><span>{item.english}</span></div>\n                        </>\n                    }\n                </Fragment>\n            )\n        })\n    }\n\n    return (\n        <div className='flashcards'>\n            <div onClick={() => setActive(false)} className='flashcards__close'>&times;</div>\n\n            <div className='flashcards__wrapper'>\n                {indexOfCard === 0 ? \n                    <img src={leftArrow} alt='left arrow' className='flashcards__left'/> \n                    : \n                    <img onClick={handlePrevClick} src={leftArrow} alt='left arrow' className='flashcards__left'/>\n                }\n\n                <div className={isFlipped ? 'flashcards__cards flipped' : 'flashcards__cards'} onClick={handleCardClick}>\n                    {loadingStatus === 'loading' ? <Spinner/> : cards(arrayOfCards)}\n                </div>\n\n                {indexOfCard === arrayOfCards.length ? \n                    <img src={rightArrow} alt='right arrow' className='flashcards__right'/> \n                    : \n                    <img onClick={handleNextClick} src={rightArrow} alt='right arrow' className='flashcards__right'/>\n                }\n            </div>\n\n            <div className='flashcards__btns'>\n                <button className='flashcards__btn' onClick={() => setVariant('')}>To main page</button>\n                <button className='flashcards__btn' onClick={() => setIsReversedCard(!isReversedCard)}>Reverse cards</button>\n            </div>\n        </div>\n    )\n}\n\nFlashCards.propTypes = {\n    setActive:  PropTypes.func.isRequired,\n    setVariant:  PropTypes.func.isRequired,\n    items:  PropTypes.array.isRequired,\n    loadingStatus:  PropTypes.string.isRequired,\n}\n\nexport default FlashCards;","import { useEffect, useState, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport './wordsQuiz.scss';\nimport Spinner from '../Spinner/Spinner';\n\nconst WordsQuiz = ({setVariant, setActive, items, loadingStatus}) => {\n\n    const [oneQuestion, setOneQuestion] = useState([]);\n    const [variants, setVariants] = useState([]);\n    const [correct, setCorrect] = useState('');\n    const [answer, setAnswer] = useState('');\n    const [index, setIndex] = useState('');\n    const [isTrue, setIsTrue] = useState(false);\n    const [isFalse, setIsFalse] = useState(false);\n    const [isChecked, setIsChecked] = useState(false);\n    const [isNextQuiestionBtnClicked, setIsNextQuiestionBtnClicked] = useState(false);\n    const [counterOfQuestions, setCounterOfQuestions] = useState(1);\n    const [amountOfRightAnswers, setAmountOfRightAnswers] = useState(0);\n\n    useEffect(() => {\n        nextQuestion();        \n        // eslint-disable-next-line\n    }, [items.length])\n\n    const nextQuestion = () => {\n        let copiedArray = [...items];\n        const randomIndex = getRandomInt(copiedArray.length);\n        const correctAnswer = copiedArray[randomIndex];\n        const variantsOfAnswers = [];\n        \n        for (let i = 0; i < 3; i++) {\n            if (randomIndex !== getRandomInt(copiedArray.length)) {\n                variantsOfAnswers.push(copiedArray[getRandomInt(copiedArray.length)]);\n            } else {\n                i = i - 1;\n            }          \n        }\n\n        variantsOfAnswers.push(correctAnswer);\n        \n        setVariants(shuffle(variantsOfAnswers));\n        setCorrect(correctAnswer);\n        setOneQuestion([copiedArray[randomIndex].english]);\n        setAnswer('');\n        setIndex('');\n        setIsFalse(false);\n        setIsTrue(false);\n        setIsChecked(false);\n        setIsNextQuiestionBtnClicked(false)\n    }\n\n    const handleNextQuestion = () => {\n        if (isChecked && answer !== \"\") {\n            nextQuestion()\n            setCounterOfQuestions(counterOfQuestions + 1)\n        } else {\n            setIsNextQuiestionBtnClicked(true)\n        }\n    }\n\n    const getRandomInt = (max) => {\n        return Math.floor(Math.random() * Math.floor(max));\n    };\n\n    const shuffle = (arr) => {\n        return arr.sort(() => Math.round(Math.random() * 100) - 50);\n    }\n\n    const handleClick = (answer, i) => {\n        setIndex(i)\n        setAnswer(answer)\n        setIsChecked(false);\n        setIsNextQuiestionBtnClicked(false)\n    }\n\n    const handleCheckAnswer = () => {\n        setIsChecked(true);\n        if (answer !== '') {\n            if (answer.id === correct.id) {\n                setAmountOfRightAnswers(amountOfRightAnswers + 1)\n                setIsFalse(false)\n                setIsTrue(true)\n            } else {\n                setIsFalse(true)\n                setIsTrue(false)\n            }\n        } else {\n            setIsFalse(false)\n            setIsTrue(false)\n        }\n    }\n\n    const onHandleClose = () => {\n        setActive(false);\n        setCounterOfQuestions(1);\n        setAmountOfRightAnswers(0);\n    }\n\n    const elements = oneQuestion.map((question, i) => {\n        return (\n            <Fragment key={i}>\n                <div className=\"wordsquiz__question\">{question}</div>\n                <ul className='wordsquiz__variants'>\n                    {variants.map((item, i) => {\n                        let classList;\n\n                        if (index === i) {\n                            if (isChecked) {\n                                if (answer.id === correct.id) {\n                                    classList = 'wordsquiz__variant rightAnswer activeAnswer';\n                                } else {\n                                    classList = 'wordsquiz__variant wrongAnswer activeAnswer';\n                                }\n                            } else {\n                                classList = 'wordsquiz__variant activeAnswer';\n                            }\n                        } else if (isChecked && item.id === correct.id && answer !== '') {\n                            classList = 'wordsquiz__variant rightAnswer answerAnimate';\n                        } else {\n                            classList = 'wordsquiz__variant';\n                        }\n\n                        return (\n                            <li \n                                onClick={() => isChecked && answer !== '' ? null : handleClick(item, i)} \n                                key={i} \n                                className={classList}\n                            >\n                                {item.russian}\n                            </li>\n                        )\n                    })}\n                </ul>\n            </Fragment>\n        )\n    })\n\n    return (\n        <div className=\"wordsquiz\">\n            <div className='wordsquiz__form'>\n                <div onClick={() => onHandleClose()} className='wordsquiz__close'>&times;</div>\n\n                <div className='wordsquiz__wrapper'>\n                    <div className='wordsquiz__score'>\n                        <div className='wordsquiz__score-amount'>Question - <b>{counterOfQuestions}</b></div>\n                        <div className='wordsquiz__score-right'>Right answers - <b>{amountOfRightAnswers}</b></div>\n                    </div>\n\n                    {loadingStatus === 'loading' ? <Spinner/> : elements}\n                    {isTrue && isChecked ? <div className='wordsquiz__success'>Correct answer</div> : null}\n                    {isFalse && isChecked ? <div className='wordsquiz__wrong'>Incorrect answer</div> : null}\n                    {isChecked && !isFalse && !isTrue ? <div className='wordsquiz__wrong'>Choose the variant</div> : null}\n                    {isNextQuiestionBtnClicked && !isChecked? <div className='wordsquiz__wrong'>You have not completed this question</div> : null}\n                </div>\n                \n                <div className='wordsquiz__btns'>\n                    <button className='wordsquiz__btn' onClick={() => setVariant('')}>To main page</button>\n                    <button className='wordsquiz__btn' onClick={() => isChecked ? false : handleCheckAnswer()}>Check</button>\n                    <button className='wordsquiz__btn' onClick={() => handleNextQuestion()}>Next quistion</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nWordsQuiz.propTypes = {\n    setVariant:  PropTypes.func.isRequired,\n    setActive:  PropTypes.func.isRequired,\n    items:  PropTypes.array.isRequired,\n    loadingStatus:  PropTypes.string.isRequired,\n}\n\nexport default WordsQuiz;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport FlashCards from '../FlashCards/FlashCards';\nimport WordsQuiz from '../WordsQuiz/WordsQuiz';\nimport cards from '../../resources/cards.jpg';\nimport quiz from '../../resources/quiz.png';\nimport './quizModal.scss';\n\nconst QuizModal = ({setActive, active, items, loadingStatus}) => {\n\n    const variantsArray = [\n        {img: quiz, name: 'Quiz'},\n        {img: cards, name: 'Cards'},\n    ]\n\n    const [selection, setSelection] = useState('');\n    const [variant, setVariant] = useState('');\n\n    const handleClick = (index) => {\n        setSelection(index)\n    }\n\n    const handleNext = () => {\n        setVariant(selection)\n    }\n    \n    const variants = variantsArray.map((item, i) => {\n        return (\n            <div \n                key={i} \n                className={selection === i ? 'quiz__variant activeVariant' : 'quiz__variant'} \n                onClick={() => handleClick(i)}\n            >\n                <img src={item.img} alt={item.name}/>\n                <div>{item.name}</div>\n            </div>\n        )\n    })\n\n    const mainForm = <div className='quiz__form'>\n                        <div className='quiz__title'>Choose an Option</div>\n\n                        <div className='quiz__variants'>\n                            {variants}\n                        </div>\n                        \n                        <div className='quiz__btns'>\n                            <button \n                                className='quiz__closebtn' \n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    setActive(false);\n                                }}    \n                            >Close\n                            </button>\n                            <button className='quiz__btn' onClick={() => handleNext()}>Next</button>\n                        </div>\n                    </div>\n\n    return (\n        <>\n            <div className={active ? \"quiz active\" : \"quiz\"}>\n                <div \n                    className={active ? \"quiz__content active\" : \"quiz__content\"} \n                    onClick={e => e.stopPropagation()}\n                >\n                    {variant === '' ? mainForm : null}\n                    {variant === 0 ? <WordsQuiz items={items} loadingStatus={loadingStatus} setVariant={setVariant} setActive={setActive}/> : null}\n                    {variant === 1 ? <FlashCards items={items} loadingStatus={loadingStatus} setVariant={setVariant} setActive={setActive}/> : null}\n                </div>\n            </div>\n        </>        \n    )\n}\n\nQuizModal.propTypes = {\n    setActive:  PropTypes.func.isRequired,\n    active:  PropTypes.bool.isRequired,\n    items:  PropTypes.array.isRequired,\n    loadingStatus:  PropTypes.string.isRequired\n}\n\nexport default QuizModal;","import { useState, useRef, useEffect, Fragment } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport settingImg from '../../resources/setting.png';\nimport './tableSetting.scss';\n\nconst TableSetting = ({address, setIsShowDate, setIsShowTicks, setIsReverseWords, setIsBlured, isShowDate, isShowTicks, isReverseWords, isBlured}) => {\n    \n    const [visiblePopup, setVisiblePopup] = useState(false);\n    \n    const selectRef = useRef();\n\n    const dispatch = useDispatch();\n\n    const items = [\n        {name: 'Show date', switcher: isShowDate, setFunc: setIsShowDate},\n        {name: 'Multiple selection', switcher: isShowTicks, setFunc: setIsShowTicks},\n        {name: 'Reverse words', switcher: isReverseWords, setFunc: setIsReverseWords},\n        {name: 'Blur right side', switcher: isBlured, setFunc: setIsBlured},\n    ]\n\n    const favoriteItems = [\n        {name: 'Show date', switcher: isShowDate, setFunc: setIsShowDate},\n        {name: 'Reverse words', switcher: isReverseWords, setFunc: setIsReverseWords},\n        {name: 'Blur right side', switcher: isBlured, setFunc: setIsBlured},\n    ]\n\n    const verbsItems = [\n        {name: 'Blur verbs', switcher: isBlured, setFunc: setIsBlured},\n    ]\n        \n    const toggleVisiblePopup = () => {\n        setVisiblePopup(!visiblePopup);\n    };\n\n    const handleOutsideClick = (event) => {\n        const path = event.path || (event.composedPath && event.composedPath());\n        \n        if (!path.includes(selectRef.current)) {\n          setVisiblePopup(false);\n        }\n    };\n\n    useEffect(() => {\n        document.body.addEventListener('click', handleOutsideClick);\n    }, []);\n\n    const elements = (array) => {\n        \n        return array.map((item, index) => (\n            <Fragment key={`${item.name}_${index}`}>\n                {item.switcher !== undefined ? \n                <div className='tableSetting__items'>\n                    <div className='tableSetting__name'>\n                        {item.name}\n                    </div>\n                    <div className=\"switcher\" onClick={() => dispatch(item.setFunc())}>\n                        <div className={item.switcher ? \"switcher__true\" : \"switcher__false\"}/>\n                    </div>\n                </div> :\n                null\n                }\n            </Fragment>\n        ))\n    }\n\n    return (\n        <>\n            <div ref={selectRef} className=\"tableSetting\">\n                <div className=\"tableSetting__label\">\n                    <img src={settingImg} alt='setting img' onClick={toggleVisiblePopup}/>\n                </div>\n                {visiblePopup && (\n                    <div className=\"tableSetting__popup\">\n                        <div className='tableSetting__wrapper'>\n                            {address.thirdUrl === 'words' ? elements(items) : null}\n                            {address.thirdUrl === 'favoriteWords' ? elements(favoriteItems) : null}\n                            {address.thirdUrl === 'irregularVerb' ? elements(verbsItems) : null}\n                        </div>\n                    </div>\n                )}\n            </div> \n        </>\n    )\n}\n\nTableSetting.propTypes = {\n    address:  PropTypes.object.isRequired,\n    setIsShowDate:  PropTypes.func,\n    setIsShowTicks:  PropTypes.func,\n    setIsReverseWords:  PropTypes.func,\n    setIsBlured:  PropTypes.func, \n    isReverseWords:  PropTypes.bool, \n    isShowDate:  PropTypes.bool,\n    isShowTicks:  PropTypes.bool, \n    isBlured:  PropTypes.bool, \n}\n\nexport default TableSetting;","import { Link, useLocation } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport TableSetting from '../TableSetting/TableSetting';\nimport \"./wordsNavigation.scss\";\n\nconst WordsNavigation = ({showSetting, setIsShowDate, setIsShowTicks, setIsReverseWords, setIsBlured, isShowDate, isShowTicks, isReverseWords, isBlured, address}) => {\n\n    const location = useLocation();\n    const [active, setActive] = useState(0);\n\n    const links = [\n        {to: '/words', text: 'All words'},\n        {to: '/words/favorites', text: 'Favorites'},\n        {to: '/words/irregular', text: 'Irregular Verbs'},\n    ]\n\n    useEffect(() => {\n        const activeTab = links.findIndex((item) => item.to === location.pathname);\n        \n        setActive(activeTab);\n        // eslint-disable-next-line\n    }, [location]);\n\n    const handleTabClick = (index) => {\n        setActive(index);\n    };\n\n    const tabs = links.map((item, i) => {\n        return (\n            <Link \n                key={i} \n                to={`${item.to}`} \n                className={i === active ? `wordsNavigation__tab activeWordsTab` : `wordsNavigation__tab`} \n                onClick={() => handleTabClick(i)}>\n                    {item.text}\n            </Link>\n        )\n    })\n\n    return (\n        <>\n            <div className=\"wordsNavigation__line\"></div>\n            <div className=\"wordsNavigation\">\n                <div className=\"wordsNavigation__tabs\">\n                    {tabs}\n                    <span className=\"tabsIndicator\"/>\n                </div>\n                {showSetting ? \n                <TableSetting\n                    address={address}\n                    setIsShowDate={setIsShowDate}\n                    setIsShowTicks={setIsShowTicks}\n                    setIsReverseWords={setIsReverseWords}\n                    setIsBlured={setIsBlured}\n                    isShowDate={isShowDate}\n                    isShowTicks={isShowTicks}\n                    isReverseWords={isReverseWords}\n                    isBlured={isBlured}\n                /> : null\n                }\n            </div>\n        </>\n    )   \n}\n\nWordsNavigation.propTypes = {\n    showSetting:  PropTypes.bool.isRequired, \n    address:  PropTypes.object.isRequired,\n    setIsShowDate:  PropTypes.func,\n    setIsShowTicks:  PropTypes.func,\n    setIsReverseWords:  PropTypes.func,\n    setIsBlured:  PropTypes.func, \n    isReverseWords:  PropTypes.bool, \n    isShowDate:  PropTypes.bool,\n    isShowTicks:  PropTypes.bool, \n    isBlured:  PropTypes.bool, \n}\n\nexport default WordsNavigation;","import { useEffect, useRef } from \"react\";\n\nconst useFilteredArray = (array, selectedLetter, searchedWord) => {\n    \n    const filtered = useRef([])\n    const filteredLength = useRef(0)\n\n    useEffect(() => {\n        let data = [];\n        const englishPattern = /^[A-Za-z\\s!.,?-]+$/;\n\n        if (searchedWord.length > 0) {\n            \n            if (englishPattern.test(searchedWord)) {\n                data = array.filter(item => {\n                    if (item.english !== undefined) {\n                        return item.english.toLowerCase().includes(searchedWord)\n                    } else {\n                        return item.baseForm.toLowerCase().includes(searchedWord)\n                    }\n                })\n            } else {\n                data = array.filter(item => {\n                    if (item.russian !== undefined) {\n                        return item.russian.toLowerCase().includes(searchedWord)\n                    } else {\n                        return item.translation.toLowerCase().includes(searchedWord)\n                    }\n                })\n            }\n\n        } else {\n            if (selectedLetter.length !== 0) {\n                \n                if (englishPattern.test(selectedLetter)) {\n                    data = array.filter(item => {\n                        if (item.english !== undefined) {\n                            return item.english.toLowerCase().slice(0, 1) === selectedLetter\n                        } else {\n                            return item.baseForm.toLowerCase().slice(0, 1) === selectedLetter\n                        }\n                    })\n                } else {\n                    data = array.filter(item => {\n                        if (item.russian !== undefined) {\n                            return item.russian.toLowerCase().slice(0, 1) === selectedLetter\n                        } else {\n                            return item.translation.toLowerCase().slice(0, 1) === selectedLetter\n                        }\n                    })\n                }\n                \n            } \n        }\n\n        filtered.current = data;\n        filteredLength.current = data.length;\n\n    }, [array, selectedLetter, searchedWord]);\n\n    return { \n        filtered: filtered.current, \n        filteredLength: filteredLength.current,\n    };\n};\n\nexport default useFilteredArray;","import {useState, useEffect} from \"react\";\nimport {useDispatch} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport database from \"../firebase\";\nimport {deleteDoc, collection, doc, setDoc} from \"firebase/firestore\"; \nimport Navigation from \"../components/Navigation/Navigation\";\nimport AddWordModal from \"../components/AddWordModal/AddWordModal\";\nimport ModifyWordModal from \"../components/ModifyWordModal/ModifyWordModal\";\nimport AlpabetFilter from '../components/AlphabetFilter/AlphabetFilter';\nimport Message from '../components/Message/Message';\nimport ArrowScrollUp from '../components/ArrowScrollUp/ArrowScrollUp';\nimport QuizModal from '../components/QuizModal/QuizModal';\nimport WordsNavigation from '../components/WordsNavigation/WordsNavigation';\nimport Footer from '../components/Footer/Footer';\nimport SortAndActions from '../components/SortAndActions/SortAndActions';\nimport useFilteredArray from '../hooks/useFilteredArray';\n\nconst Page = ({\n    TableComponent, \n    sortItems, \n    sortType, \n    sortByFunction, \n    activeSortTypeChanged, \n    setNumberPerUpload, \n    numberPerUpload, \n    currentPage, \n    totalPages, \n    setPage, \n    numberOfItemsPerPage, \n    address, \n    wordsLoadingStatus, \n    deleteItem, \n    deleteItems, \n    add, \n    modify, \n    setTotalPages, \n    items,  \n    letter, \n    setLetter, \n    isBlured, \n    isShowDate, \n    isReverseWords,\n    isShowTicks, \n    setIsBlured, \n    setIsShowDate, \n    setIsReverseWords, \n    setIsShowTicks}) => {\n    \n    const [addModalActive, setAddModalActive] = useState(false);\n    const [modifyModalActive, setModifyModalActive] = useState(false);\n    const [quizModalActive, setQuizModalActive] = useState(false);\n\n    const [selectedWord, setSelectedWord] = useState({});\n    const [selectedWords, setSelectedWords] = useState([]);\n    const [searchedWord, setSearchedWord] = useState('');\n    const [cuttedArrayOfWords, setCuttedArrayOfWords] = useState([]);\n    const [filteredArrayLength, setFilteredArrayLength] = useState(0);\n\n    const [message, setMessage] = useState({});\n    const [showMessage, setShowMessage] = useState(false);\n\tconst [offset, setOffset] = useState(30);\n\n    const {filtered, filteredLength} = useFilteredArray(items, letter, searchedWord)\n    \n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!!activeSortTypeChanged) {\n            dispatch(sortByFunction(sortType))\n        } \n        // eslint-disable-next-line\n    }, [sortType, items])\n\n    useEffect(() => {\n        setFilteredArrayLength(filteredLength)\n        // eslint-disable-next-line\n    }, [filteredLength]);\n\n    useEffect(() => {\n        if (addModalActive || modifyModalActive || quizModalActive) {\n            document.body.style.overflow = 'hidden';\n        } else {\n            document.body.style.overflow = 'auto';\n        }\n        // eslint-disable-next-line\n    }, [addModalActive, modifyModalActive, quizModalActive]);\n\n    useEffect(() => {\n        const handleKeyPress = (event) => {\n            if (event.key === 'Escape') {\n                setAddModalActive(false);\n                setModifyModalActive(false);\n                setQuizModalActive(false);\n            }\n        };\n    \n        document.addEventListener('keydown', handleKeyPress);\n    \n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n        };\n    }, []);\n\n    useEffect(() => {\n        setSelectedWord({});\n        setSelectedWords([]);\n        // eslint-disable-next-line\n    }, [letter, searchedWord.length]);\n\n    useEffect(() => {\n        setOffset(numberPerUpload * currentPage)\n        // eslint-disable-next-line\n    }, [currentPage]);\n\n    useEffect(() => {\n        if (letter.length !== 0 || searchedWord.length > 0) {\n            if (!(filteredArrayLength % numberPerUpload)) {\n                dispatch(setTotalPages(filteredArrayLength/numberPerUpload))\n            } else {\n                dispatch(setTotalPages(Math.ceil((filteredArrayLength/numberPerUpload))))\n            }\n        } else {\n            if (!(items.length % numberPerUpload)) {\n                dispatch(setTotalPages(items.length/numberPerUpload))\n            } else {\n                dispatch(setTotalPages(Math.ceil((items.length/numberPerUpload))))\n            }\n        }\n        // eslint-disable-next-line\n    }, [items, numberPerUpload, letter, searchedWord.length, filteredArrayLength, totalPages])\n\n    useEffect(() => {\n        let lastIndex = currentPage * numberPerUpload;\n        let firstIndex = lastIndex - numberPerUpload;\n\n        if (letter.length !== 0 || searchedWord.length > 0) {\n            setCuttedArrayOfWords(filtered.slice(firstIndex, lastIndex));\n        } else {\n            setCuttedArrayOfWords(items.slice(firstIndex, lastIndex));\n        }\n        // eslint-disable-next-line\n    }, [items, offset, letter, searchedWord.length, numberPerUpload, filtered, currentPage]);\n\n    const handleAddModal = () => {\n        setAddModalActive(!addModalActive);\n    }\n\n    const handleModifyModal = () => {\n        if (selectedWord !== undefined || selectedWords.length !== 0) {\n            setModifyModalActive(!modifyModalActive);\n        } else {\n            setShowMessage(true);\n            setMessage({\n                text: \"Choose the word!\",\n                color: 'red'\n            })\n        }\n    }\n\n    const handleQuizModal = () => {\n        if (items.length > 20) {\n            setQuizModalActive(!quizModalActive)\n        } else {\n            setShowMessage(true)\n            setMessage({\n                text: \"Must be at least 20 words!\",\n                color: 'red'\n            })\n        }\n    }\n\n    const onAddToFavorite = (word) => {\n        const favoriteColRef = collection(database, address.firstUrl, address.secondUrl, 'favoriteWords')\n        const wordsColRef = collection(database, address.firstUrl, address.secondUrl, 'words')\n        \n        const obj = {\n            ...word,\n            favorite : !word.favorite,\n        }\n        \n        if (obj.favorite) {\n            setDoc(doc(favoriteColRef, obj.id), obj);\n\n            setShowMessage(true);\n            setMessage({\n                text: \"Added to favorite!\",\n                color: 'green'\n            })\n        } else {\n            if (address.thirdUrl !== 'favoriteWords') {\n                deleteDoc(doc(favoriteColRef, obj.id));\n            \n                setShowMessage(true);\n                setMessage({\n                    text: \"Deleted from favorite!\",\n                    color: 'green'\n                })\n            } else {\n                if (window.confirm('Are you sure?')) {\n                    dispatch(deleteItem(obj.id));\n                \n                    deleteDoc(doc(favoriteColRef, obj.id));\n                    setDoc(doc(wordsColRef, obj.id), obj);        \n            \n                    setShowMessage(true);\n                    setMessage({\n                        text: \"Deleted from favorite!\",\n                        color: 'green'\n                    })\n                }\n            }\n            \n        }\n\n        setDoc(doc(wordsColRef, obj.id), obj);\n        dispatch(modify(obj));\n    }\n    \n    const onDeleteWord = () => {\n        const favoriteColRef = collection(database, address.firstUrl, address.secondUrl, 'favoriteWords')\n        const wordsColRef = collection(database, address.firstUrl, address.secondUrl, 'words')\n        \n        if (selectedWord.id !== undefined || selectedWords.length > 0) {\n            if (selectedWords.length === 0) {\n                if (window.confirm('Are you sure?')) {\n                    dispatch(deleteItem(selectedWord.id));\n        \n                    if (selectedWord.favorite) {\n                        deleteDoc(doc(favoriteColRef, selectedWord.id));\n                        deleteDoc(doc(wordsColRef, selectedWord.id));\n                    } else {\n                        deleteDoc(doc(wordsColRef, selectedWord.id));\n                    }                    \n    \n                    setSelectedWord({})\n\n                    setShowMessage(true)\n                    setMessage({\n                        text: \"The word was successfully deleted!\",\n                        color: 'green'\n                    })\n                }\n            } else {\n                if (window.confirm('Are you sure?')) {\n                    dispatch(deleteItems(selectedWords));\n\n                    if (selectedWord.favorite) {\n                        selectedWords.forEach(item => deleteDoc(doc(favoriteColRef, item)))\n                        selectedWords.forEach(item => deleteDoc(doc(wordsColRef, item)))\n                    } else {\n                        selectedWords.forEach(item => deleteDoc(doc(wordsColRef, item)))\n                    }\n        \n                    setSelectedWords([]);\n                    \n                    setShowMessage(true)\n                    setMessage({\n                        text: \"The word was successfully deleted!\",\n                        color: 'green'\n                    })\n                }\n            }\n\n        } else {\n            setShowMessage(true)\n            setMessage({\n                text: \"Choose the word!\",\n                color: 'red'\n            })\n        }\n    }\n\n    const onClearLetter = () => {\n        dispatch(setLetter(''));\n        setFilteredArrayLength(0);\n        setOffset(numberPerUpload);\n        dispatch(setPage(1))\n    }\n\n    const switchToFirstPage = () => {\n        dispatch(setPage(1))\n    }\n    \n    return (\n        <>\n            <Navigation \n                letter={letter}\n                items={items}\n                setSearched={setSearchedWord}\n                setOffset={setOffset}\n                numberPerUpload={numberPerUpload}\n                setFilteredArrayLength={setFilteredArrayLength}\n            />\n            <WordsNavigation\n                showSetting={true}\n                setIsShowDate={setIsShowDate}\n                setIsShowTicks={setIsShowTicks}\n                setIsReverseWords={setIsReverseWords}\n                setIsBlured={setIsBlured}\n                isShowDate={isShowDate}\n                isShowTicks={isShowTicks}\n                isReverseWords={isReverseWords}\n                isBlured={isBlured}\n                address={address}\n            />\n            <SortAndActions\n                items={cuttedArrayOfWords}\n                handleAddModal={handleAddModal}\n                onDelete={onDeleteWord}\n                filteredArrayLength={filteredArrayLength}\n                sortItems={sortItems}\n                active={sortType}\n                textForSelectPopup={\"Sort by:\"}\n                dispatchFunction={sortByFunction}\n                activeTypeChanged={activeSortTypeChanged}\n                handleQuizModal={handleQuizModal}\n                address={address}\n            />\n            <AlpabetFilter \n                letter={letter}\n                setLetter={setLetter} \n                setOffset={setOffset}\n                wordsPerUpload={numberPerUpload}               \n                onClearLetter={onClearLetter}\n                switchToFirstPage={switchToFirstPage}\n                searchedWord={searchedWord}\n                items={items}\n            />\n            <TableComponent \n                searchedWord={searchedWord}\n                cuttedArrayOfWords={cuttedArrayOfWords}\n                selectedLetter={letter}\n                selectedWord={selectedWord}\n                setSelectedWord={setSelectedWord}\n                selectedWords={selectedWords}\n                setSelectedWords={setSelectedWords}\n                onAddToFavorite={onAddToFavorite}\n                handleModifyModal={handleModifyModal}\n                loadingStatus={wordsLoadingStatus}\n                isShowDate={isShowDate}\n                isBlured={isBlured}\n                isShowTicks={isShowTicks}\n                isReverseWords={isReverseWords}\n                items={items}\n            />\n            <Footer\n                cuttedArray={cuttedArrayOfWords}\n                filteredArrayLength={filteredArrayLength}\n                numberPerUpload={numberPerUpload}\n                currentPage={currentPage}\n                totalPages={totalPages}\n                setPage={setPage}\n                numberOfItemsPerPage={numberOfItemsPerPage}\n                active={numberPerUpload}\n                textForSelectPopup={\"On the page:\"}\n                textForCounters={\"words\"}\n                dispatchFunction={setNumberPerUpload}\n                switchToFirstPage={switchToFirstPage}\n                loadingStatus={wordsLoadingStatus}\n                items={items}\n            />\n            <AddWordModal \n                width={290}\n                height={230}\n                maxLength={30}\n                active={addModalActive} \n                setActive={setAddModalActive} \n                address={address}\n                func={add}\n                items={items}\n                setShowMessage={setShowMessage}\n                setMessage={setMessage}\n            />\n            <ModifyWordModal\n                width={290}\n                height={230}\n                maxLength={30}\n                active={modifyModalActive} \n                setActive={setModifyModalActive} \n                address={address}\n                func={modify}\n                items={items}\n                selected={selectedWord}\n                setShowMessage={setShowMessage}\n                setMessage={setMessage}\n            />\n            <QuizModal \n                active={quizModalActive}\n                setActive={setQuizModalActive}\n                items={items}\n                loadingStatus={wordsLoadingStatus}\n            />\n            <Message \n                message={message.text} \n                showMessage={showMessage} \n                setShowMessage={setShowMessage}\n                color={message.color}\n            />\n            <ArrowScrollUp/>\n        </>\n    )\n}\n\nPage.propTypes = {\n    TableComponent: PropTypes.func.isRequired, \n    sortItems: PropTypes.array.isRequired, \n    sortType: PropTypes.string.isRequired, \n    sortByFunction: PropTypes.func.isRequired, \n    activeSortTypeChanged: PropTypes.func.isRequired, \n    setNumberPerUpload: PropTypes.func.isRequired, \n    numberPerUpload: PropTypes.number.isRequired, \n    currentPage: PropTypes.number.isRequired, \n    totalPages: PropTypes.number.isRequired, \n    setPage: PropTypes.func.isRequired, \n    numberOfItemsPerPage: PropTypes.array.isRequired, \n    address: PropTypes.object.isRequired, \n    wordsLoadingStatus: PropTypes.string.isRequired, \n    deleteItem: PropTypes.func, \n    deleteItems: PropTypes.func, \n    add: PropTypes.func, \n    modify: PropTypes.func, \n    setTotalPages: PropTypes.func.isRequired, \n    items: PropTypes.array.isRequired,  \n    letter: PropTypes.string.isRequired, \n    setLetter: PropTypes.func.isRequired, \n    isBlured: PropTypes.bool, \n    isShowDate: PropTypes.bool, \n    isReverseWords: PropTypes.bool,\n    isShowTicks: PropTypes.bool, \n    setIsBlured: PropTypes.func, \n    setIsShowDate: PropTypes.func, \n    setIsReverseWords: PropTypes.func, \n    setIsShowTicks: PropTypes.func,\n}\n\nexport default Page;"],"names":["_ref","width","height","maxLength","active","setActive","address","func","items","selected","setMessage","setShowMessage","dataForModify","find","item","id","_useState","useState","_useState2","_slicedToArray","english","setEnglish","_useState3","_useState4","russian","setRussian","dispatch","useDispatch","useEffect","undefined","handleSubmit","e","preventDefault","favoriteColRef","collection","database","firstUrl","secondUrl","wordsColRef","index","findIndex","toLowerCase","obj","favorite","date","setDoc","doc","text","color","_jsx","className","onClick","children","style","concat","stopPropagation","onKeyDown","key","_jsxs","onSubmit","htmlFor","value","onChange","target","replace","type","placeholder","required","searchedWord","setLetter","letter","setOffset","wordsPerUpload","onClearLetter","switchToFirstPage","switcher","setSwitcher","elements","array","map","i","Fragment","handleSelectLetter","length","_Fragment","src","en","alt","arrow","ru","all","setVariant","loadingStatus","isFlipped","setIsFlipped","isReversedCard","setIsReversedCard","_useState5","_useState6","arrayOfCards","setArrayOfCards","_useState7","_useState8","indexOfCard","setIndexOfCard","timerRef","useRef","copiedArray","_toConsumableArray","randomIndex","getRandomIndex","temp","clearTimeout","current","min","max","Math","floor","random","leftArrow","setTimeout","Spinner","rightArrow","oneQuestion","setOneQuestion","variants","setVariants","correct","setCorrect","answer","setAnswer","_useState9","_useState10","setIndex","_useState11","_useState12","isTrue","setIsTrue","_useState13","_useState14","isFalse","setIsFalse","_useState15","_useState16","isChecked","setIsChecked","_useState17","_useState18","isNextQuiestionBtnClicked","setIsNextQuiestionBtnClicked","_useState19","_useState20","counterOfQuestions","setCounterOfQuestions","_useState21","_useState22","amountOfRightAnswers","setAmountOfRightAnswers","nextQuestion","getRandomInt","correctAnswer","variantsOfAnswers","push","shuffle","arr","sort","round","question","classList","handleClick","variantsArray","img","quiz","name","cards","selection","setSelection","variant","mainForm","WordsQuiz","FlashCards","setIsShowDate","setIsShowTicks","setIsReverseWords","setIsBlured","isShowDate","isShowTicks","isReverseWords","isBlured","visiblePopup","setVisiblePopup","selectRef","setFunc","favoriteItems","verbsItems","handleOutsideClick","event","path","composedPath","includes","document","body","addEventListener","ref","thirdUrl","showSetting","location","useLocation","links","to","activeTab","pathname","tabs","Link","TableSetting","selectedLetter","filtered","filteredLength","data","englishPattern","test","filter","baseForm","translation","slice","TableComponent","sortItems","sortType","sortByFunction","activeSortTypeChanged","setNumberPerUpload","numberPerUpload","currentPage","totalPages","setPage","numberOfItemsPerPage","wordsLoadingStatus","deleteItem","deleteItems","add","modify","setTotalPages","addModalActive","setAddModalActive","modifyModalActive","setModifyModalActive","quizModalActive","setQuizModalActive","selectedWord","setSelectedWord","selectedWords","setSelectedWords","setSearchedWord","cuttedArrayOfWords","setCuttedArrayOfWords","filteredArrayLength","setFilteredArrayLength","message","showMessage","offset","_useFilteredArray","useFilteredArray","overflow","handleKeyPress","removeEventListener","ceil","lastIndex","firstIndex","Navigation","setSearched","WordsNavigation","SortAndActions","handleAddModal","onDelete","window","confirm","deleteDoc","forEach","textForSelectPopup","dispatchFunction","activeTypeChanged","handleQuizModal","AlpabetFilter","onAddToFavorite","word","_objectSpread","handleModifyModal","Footer","cuttedArray","textForCounters","AddWordModal","ModifyWordModal","QuizModal","Message","ArrowScrollUp"],"sourceRoot":""}