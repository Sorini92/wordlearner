{"version":3,"file":"static/js/161.2cb284b0.chunk.js","mappings":"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","sources":["components/IrregularVerbsTable.js/IrregularVerbsTable.js","pages/IrregularVerbsPage.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Spinner from '../Spinner/Spinner';\nimport './irregularVerbsTable.scss';\n\nconst IrregularVerbsTable = ({loadingStatus, items, searchedWord, cuttedArrayOfWords, selectedLetter, isBlured}) => {\n\n    const [idForCompare, setIdForCompare] = useState('');\n    const [unbluredWord, setUnbluredWord] = useState('');\n\n    const timerRef = useRef(null)\n\n    const handleUnblur = (word) => {\n\n        clearTimeout(timerRef.current);\n        setUnbluredWord(word);\n\n        timerRef.current = setTimeout(() => {\n            setUnbluredWord('')\n        }, 2000);\n\n    }\n\n    useEffect(() => () => clearTimeout(timerRef.current), [])\n    \n    const handleClick = (word) => {\n        setIdForCompare(word.id);\n    }\n\n    const elements = (array) => {\n        return array.map((item) => {\n\n            const isItemBlurred = isBlured && unbluredWord !== item.id;\n            \n            return (\n                <CSSTransition \n                    timeout={500}\n                    key={item.id}\n                    classNames={{\n                        appear: 'verb-appear',\n                        appearActive: 'verb-appear-active',\n                        enter: 'verb-enter',\n                        enterActive: 'verb-enter-active',\n                        exit: 'verb-exit',\n                        exitActive: 'verb-exit-active'\n                    }}\n                >\n                    <tr \n                        className={idForCompare !== item.id ? 'verb' : 'verb activeVerb'} \n                        onClick={() => handleClick(item)}\n                    >\n                            <td \n                                onClick={() => handleUnblur(item.id)} \n                                className={isItemBlurred ? 'irregularVerbsTable__base blur' : 'irregularVerbsTable__base'}>\n                                {item.baseForm}\n                            </td>\n                            <td \n                                onClick={() => handleUnblur(item.id)} \n                                className={isItemBlurred ? 'irregularVerbsTable__simple blur' : 'irregularVerbsTable__simple'}>\n                                {item.pastParticiple}\n                            </td> \n                            <td \n                                onClick={() => handleUnblur(item.id)} \n                                className={isItemBlurred ? 'irregularVerbsTable__participle blur' : 'irregularVerbsTable__participle'}>\n                                {item.pastSimple}\n                            </td>\n                            <td className='irregularVerbsTable__translation'>\n                                {item.translation}\n                            </td> \n                    </tr>\n                </CSSTransition>\n            )\n        })\n    }\n    \n    const table = () => {\n\n        if (items.length === 0) {\n            return (\n                <div className='emptyTable'>You have not added words yet!</div>\n            )\n        }\n\n        if ((cuttedArrayOfWords.length === 0 && selectedLetter.length > 0)) {\n            return (\n                <div className='emptyTable'>There are no words!</div>\n            )\n        }\n\n        if ((cuttedArrayOfWords.length === 0 && searchedWord.length > 0)) {\n            return (\n                <div className='emptyTable'>No searched word!</div>\n            )\n        }\n\n        return (\n            <div className='irregularVerbsTable__wrapper'>\n                <table className='irregularVerbsTable'>\n                    <thead>\n                        <tr>\n                            <th className='irregularVerbsTable__base'>\n                                Base form\n                            </th> \n                            <th className='irregularVerbsTable__simple'>\n                                Past simple\n                            </th> \n                            <th className='irregularVerbsTable__participle'>\n                                Past participle\n                            </th>\n                            <th className='irregularVerbsTable__translation'>\n                                Translation\n                            </th> \n                        </tr>\n                    </thead>\n                    <TransitionGroup component=\"tbody\">\n                        {elements(cuttedArrayOfWords)}\n                    </TransitionGroup>\n                </table>\n            </div>\n        )\n    }\n    \n    if (loadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (loadingStatus === \"error\") {\n        return <div className='error'>Something went wrong, error from server</div>\n    }\n\n    return (\n        <>\n            {table()}\n        </>\n    )\n}\n\nIrregularVerbsTable.propTypes = {\n    searchedWord:  PropTypes.string.isRequired,\n    cuttedArrayOfWords:  PropTypes.array.isRequired,\n    selectedLetter:  PropTypes.string.isRequired,\n    isBlured:  PropTypes.bool.isRequired,\n}\n\nexport default IrregularVerbsTable;","import {useDispatch, useSelector} from 'react-redux';\nimport {useEffect} from \"react\";\nimport useAuth from '../hooks/use-auth';\nimport { Helmet } from \"react-helmet\";\nimport {setTotalPages, fetchIrregularVerbs, sortBy, activeSortTypeChanged, setWordsPerUpload, setPage, setLetter, setIsBlured} from '../store/slices/irregularVerbsSlice';\nimport IrregularVerbsTable from '../components/IrregularVerbsTable.js/IrregularVerbsTable';\nimport Page from './Page';\n\nconst IrregularVerbsPage = () => {\n\n    const {wordsLoadingStatus, verbs, wordsPerUpload, sortType, currentPage, totalPages, letter, isBlured} = useSelector(state => state.irregularVerbs);\n    \n    const dispatch = useDispatch();\n    const {isAuth} = useAuth();\n\n    const sortItems = [        \n        { name: 'a to z'},\n        { name: 'z to a'},\n        { name: 'а to я'},\n        { name: 'я to а'},\n    ];\n\n    const numberOfWordsPerPage = [\n        { name: 30},\n        { name: 60},\n        { name: 90},        \n    ];\n\n    const linkToWords = {\n        thirdUrl: 'irregularVerb'\n    }\n    \n    useEffect(() => {\n        dispatch(fetchIrregularVerbs());\n        // eslint-disable-next-line\n    }, []);\n\n    return isAuth ? (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"irregular verbs page\"\n                />\n                <title>Irregular verbs</title>\n            </Helmet>\n            <Page\n                sortItems={sortItems}\n                sortType={sortType}\n                sortByFunction={sortBy}\n                activeSortTypeChanged={activeSortTypeChanged}\n                setNumberPerUpload={setWordsPerUpload}\n                numberPerUpload={wordsPerUpload}\n                currentPage={currentPage}\n                totalPages={totalPages}\n                setPage={setPage}\n                numberOfItemsPerPage={numberOfWordsPerPage}\n                address={linkToWords}\n                wordsLoadingStatus={wordsLoadingStatus}\n                setTotalPages={setTotalPages}\n                TableComponent={IrregularVerbsTable}\n                items={verbs}\n                letter={letter}\n                setLetter={setLetter}\n                isBlured={isBlured}\n                setIsBlured={setIsBlured}\n            />\n        </>\n    ) : null\n}\n\nexport default IrregularVerbsPage;"],"names":["_ref","loadingStatus","items","searchedWord","cuttedArrayOfWords","selectedLetter","isBlured","_useState","useState","_useState2","_slicedToArray","idForCompare","setIdForCompare","_useState3","_useState4","unbluredWord","setUnbluredWord","timerRef","useRef","handleUnblur","word","clearTimeout","current","setTimeout","useEffect","elements","array","map","item","isItemBlurred","id","_jsx","CSSTransition","timeout","classNames","appear","appearActive","enter","enterActive","exit","exitActive","children","_jsxs","className","onClick","baseForm","pastParticiple","pastSimple","translation","Spinner","_Fragment","length","TransitionGroup","component","_useSelector","useSelector","state","irregularVerbs","wordsLoadingStatus","verbs","wordsPerUpload","sortType","currentPage","totalPages","letter","dispatch","useDispatch","isAuth","useAuth","fetchIrregularVerbs","Helmet","name","content","Page","sortItems","sortByFunction","sortBy","activeSortTypeChanged","setNumberPerUpload","setWordsPerUpload","numberPerUpload","setPage","numberOfItemsPerPage","address","thirdUrl","setTotalPages","TableComponent","IrregularVerbsTable","setLetter","setIsBlured"],"sourceRoot":""}