{"version":3,"file":"static/js/999.d398ea0b.chunk.js","mappings":"mUAyRA,EAhRmB,SAAHA,GAeA,IAdZC,EAAiBD,EAAjBC,kBACAC,EAAYF,EAAZE,aACAC,EAAkBH,EAAlBG,mBACAC,EAAcJ,EAAdI,eACAC,EAAeL,EAAfK,gBACAC,EAAaN,EAAbM,cACAC,EAAYP,EAAZO,aACAC,EAAgBR,EAAhBQ,iBACAC,EAAeT,EAAfS,gBACAC,EAAaV,EAAbU,cACAC,EAAUX,EAAVW,WACAC,EAAWZ,EAAXY,YACAC,EAAcb,EAAda,eACAC,EAAQd,EAARc,SACAC,EAAKf,EAALe,MAEAC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAwCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,GAAWC,EAAAA,EAAAA,QAAO,OAaxBC,EAAAA,EAAAA,YAAU,kBAAM,kBAAMC,aAAaH,EAASI,QAAQ,IAAE,KAEtDF,EAAAA,EAAAA,YAAU,WACDhB,IACDS,GAAa,GACbb,EAAiB,IAGzB,GAAG,CAACI,KAEJgB,EAAAA,EAAAA,YAAU,WACuB,IAAzBtB,EAAcyB,QACdV,GAAa,EAErB,GAAG,CAACf,EAAcyB,SAElB,IAIMC,EAAuB,SAACC,GAG1B,GAFAZ,EAAaY,EAAMC,OAAOC,SAEtBF,EAAMC,OAAOC,QAAjB,CACI,IAAMC,EAAcjC,EAAmBkC,KAAI,SAACC,GAAC,OAAKA,EAAEC,EAAE,IACtD/B,EAAiB4B,EAErB,MAEA5B,EAAiB,GACrB,EAwBMgC,EAAkB,SAACC,GACrB,IAAIC,EAAa,IAAIC,KAAKF,GAE1B,MAAM,GAANG,OAAUF,EAAWG,qBAAoB,KAAAD,OAAIF,EAAWI,qBAC5D,EAEMC,EAAkB,SAACC,GACrBvC,EAAgBuC,EACpB,EAIMC,EAAW,SAACC,GACd,OAAOA,EAAMb,KAAI,SAACc,GAEd,IAAMC,EAAgBtC,GAAYU,IAAiB2B,EAAKZ,GAExD,OACIc,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACVC,QAAS,IAETC,WAAY,CACRC,OAAQ,cACRC,aAAc,qBACdC,MAAO,aACPC,YAAa,oBACbC,KAAM,YACNC,WAAY,oBACdC,UAEFC,EAAAA,EAAAA,MAAA,MACIC,UAAW1D,EAAagC,KAAOY,EAAKZ,GAAK,OAAS,kBAClD2B,QAAS,WArEzB7D,EAqE2C8C,EAAK,EAACY,SAAA,CAEhCnD,GACGyC,EAAAA,EAAAA,KAAA,MAAIY,UAAU,oBAAmBF,UAC7BV,EAAAA,EAAAA,KAAA,SACIlB,QAAS7B,EAAc6D,SAAShB,EAAKZ,KAAOnB,EAC5CgD,SAAU,SAACC,GAAC,OA5DvB,SAAC9B,GAElB,IAAM+B,EAAgBhE,EAAciE,QAAQhC,GAExCH,EAAc,IAEK,IAAnBkC,EACAlC,EAAcA,EAAYQ,OAAOtC,EAAeiC,GACvB,IAAlB+B,EACPlC,EAAcA,EAAYQ,OAAOtC,EAAckE,MAAM,IAC9CF,IAAkBhE,EAAcyB,OAAS,EAChDK,EAAcA,EAAYQ,OAAOtC,EAAckE,MAAM,GAAI,IAClDF,EAAgB,IACvBlC,EAAcA,EAAYQ,OACtBtC,EAAckE,MAAM,EAAGF,GACvBhE,EAAckE,MAAMF,EAAgB,KAI5C9D,EAAiB4B,EACrB,CAwCiDqC,CAAatB,EAAKZ,GAAG,EACtCmC,KAAK,eAIb,MAEJrB,EAAAA,EAAAA,KAAA,MAAIY,UAAU,mBAAkBF,SAC3BlD,EAAiBsC,EAAKwB,QAAUxB,EAAKyB,WAE1CvB,EAAAA,EAAAA,KAAA,MAAIY,UAAU,wBAAwBY,MAAOlE,EAAa,CAAC,aAAgB,GAAK,KAAKoD,UACjFC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BF,SAAA,EACxCV,EAAAA,EAAAA,KAAA,OACIa,QAAS,kBApHnBlB,EAoHsCG,EAAKZ,GAlH7DV,aAAaH,EAASI,SACtBL,EAAgBuB,QAEhBtB,EAASI,QAAUgD,YAAW,WAC1BrD,EAAgB,GACpB,GAAG,MAPc,IAACuB,CAoH8C,EACpCiB,UAAWb,EAAgB,OAAS,GAAGW,SAEtClD,EAAiBsC,EAAKyB,QAAUzB,EAAKwB,UAExChE,EAaI,MAZNqD,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAhB,SAAA,EACIV,EAAAA,EAAAA,KAAA,OAAKa,QAAS,kBAAMjE,GAAmB,EAAEgE,UAAU,qCAAoCF,UACnFV,EAAAA,EAAAA,KAAA,OAAK2B,IAAKC,EAAQC,IAAI,qBAE1B7B,EAAAA,EAAAA,KAAA,OACIa,QAAS,kBAAMnB,EAAgBI,EAAK,EACpCc,UAAU,mCAAkCF,SAC3CZ,EAAKgC,UACF9B,EAAAA,EAAAA,KAAA,OAAKY,UAAU,GAAGe,IAAKI,EAAUF,IAAI,eACrC7B,EAAAA,EAAAA,KAAA,OAAK2B,IAAKK,EAAMH,IAAI,mBAOvCvE,GACG0C,EAAAA,EAAAA,KAAA,MAAIY,UAAU,mBAAkBF,UAC5BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8BAA6BF,SAAA,CACvCpD,EAAa6B,EAAgBW,EAAKV,MAAQ,MAC3CY,EAAAA,EAAAA,KAAA,OAAKa,QAAS,kBAAMjE,GAAmB,EAAEgE,UAAU,qCAAoCF,UACnFV,EAAAA,EAAAA,KAAA,OAAK2B,IAAKC,EAAQC,IAAI,qBAE1B7B,EAAAA,EAAAA,KAAA,OACIa,QAAS,kBAAMnB,EAAgBI,EAAK,EACpCc,UAAU,mCAAkCF,SAC3CZ,EAAKgC,UACF9B,EAAAA,EAAAA,KAAA,OAAKY,UAAU,GAAGe,IAAKI,EAAUF,IAAI,eACrC7B,EAAAA,EAAAA,KAAA,OAAK2B,IAAKK,EAAMH,IAAI,gBAOxC,SAxEC/B,EAAKZ,GA4EtB,GACJ,EAyDA,MAAsB,YAAlB7B,GACO2C,EAAAA,EAAAA,KAACiC,EAAAA,EAAO,IACU,UAAlB5E,GACA2C,EAAAA,EAAAA,KAAA,OAAKY,UAAU,QAAOF,SAAC,6CAI9BV,EAAAA,EAAAA,KAAA0B,EAAAA,SAAA,CAAAhB,SA5DqB,IAAjBhD,EAAMgB,QAEFsB,EAAAA,EAAAA,KAAA,OAAKY,UAAU,aAAYF,SAAC,kCAID,IAA9B5D,EAAmB4B,QAAgB3B,EAAe2B,OAAS,GAExDsB,EAAAA,EAAAA,KAAA,OAAKY,UAAU,aAAYF,SAAC,wBAID,IAA9B5D,EAAmB4B,QAAgB7B,EAAa6B,OAAS,GAEtDsB,EAAAA,EAAAA,KAAA,OAAKY,UAAU,aAAYF,SAAC,uBAKhCV,EAAAA,EAAAA,KAAA,OAAKY,UAAU,sBAAqBF,UAChCC,EAAAA,EAAAA,MAAA,SAAOC,UAAU,aAAYF,SAAA,EACzBV,EAAAA,EAAAA,KAAA,SAAAU,UACIC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,CACKnD,GACGyC,EAAAA,EAAAA,KAAA,MAAIY,UAAU,oBAAmBF,UAC7BV,EAAAA,EAAAA,KAAA,SAAOqB,KAAK,WAAWvC,QAASf,EAAWgD,SAAUpC,MAGzD,MAEJqB,EAAAA,EAAAA,KAAA,MAAIY,UAAU,yBAAwBF,SACjClD,EAAiB,gBAAkB,mBAExCwC,EAAAA,EAAAA,KAAA,MAAIY,UAAU,8BAA6BF,SACtClD,EAAiB,gBAAkB,kBAEvCF,GACG0C,EAAAA,EAAAA,KAAA,MAAIY,UAAU,yBAAwBF,SAAC,mBAIvC,WAIZV,EAAAA,EAAAA,KAACkC,EAAAA,EAAe,CAACC,UAAU,QAAOzB,SAC7Bd,EAAS9C,WAkBlC,C,iHC9KA,UA/EkB,WAEd,IAAAsF,GAAkJC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK,IAA3KC,EAAkBJ,EAAlBI,mBAAoBD,EAAKH,EAALG,MAAOE,EAAcL,EAAdK,eAAgBC,EAAQN,EAARM,SAAUC,EAAWP,EAAXO,YAAaC,EAAUR,EAAVQ,WAAYC,EAAMT,EAANS,OAAQpF,EAAQ2E,EAAR3E,SAAUH,EAAU8E,EAAV9E,WAAYE,EAAc4E,EAAd5E,eAAgBD,EAAW6E,EAAX7E,YAE7HuF,GAAWC,EAAAA,EAAAA,MACjBC,GAAqBC,EAAAA,EAAAA,KAAdC,EAAMF,EAANE,OAAQhE,EAAE8D,EAAF9D,GAiBTiE,EAAc,CAChBC,SAAU,QACVC,UAAWnE,EACXoE,SAAU,SAUd,OAPA/E,EAAAA,EAAAA,YAAU,WACK,OAAPW,GACA4D,GAASS,EAAAA,EAAAA,IAAWrE,GAG5B,GAAG,CAACA,IAEIgE,GACJvC,EAAAA,EAAAA,MAAAe,EAAAA,SAAA,CAAAhB,SAAA,EACIC,EAAAA,EAAAA,MAAC6C,EAAAA,EAAM,CAAA9C,SAAA,EACHV,EAAAA,EAAAA,KAAA,QACIyD,KAAK,cACLC,QAAQ,gBAEZ1D,EAAAA,EAAAA,KAAA,SAAAU,SAAO,cAEXV,EAAAA,EAAAA,KAAC2D,EAAAA,EAAI,CACDC,UAtCM,CACd,CAAEH,KAAM,YACR,CAAEA,KAAM,YACR,CAAEA,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,oBACR,CAAEA,KAAM,qBAiCAf,SAAUA,EACVmB,eAAgBC,EAAAA,GAChBC,sBAAuBA,EAAAA,GACvBC,mBAAoBC,EAAAA,GACpBC,gBAAiBzB,EACjBE,YAAaA,EACbC,WAAYA,EACZuB,QAASA,EAAAA,GACTC,qBAtCiB,CACzB,CAAEX,KAAM,IACR,CAAEA,KAAM,IACR,CAAEA,KAAM,KAoCAY,QAASlB,EACTX,mBAAoBA,EACpB8B,WAAYC,EAAAA,GACZC,YAAaC,EAAAA,GACbC,IAAKC,EAAAA,GACLC,OAAQC,EAAAA,EACRC,cAAeA,EAAAA,GACfC,eAAgBC,EAAAA,EAChBtH,MAAO6E,EACPM,OAAQA,EACRoC,UAAWA,EAAAA,GACXxH,SAAUA,EACVH,WAAYA,EACZE,eAAgBA,EAChBD,YAAaA,EACb2H,YAAaA,EAAAA,GACbC,cAAeA,EAAAA,GACfC,kBAAmBA,EAAAA,GACnBC,eAAgBA,EAAAA,QAGxB,IACR,C","sources":["components/WordsTable/WordsTable.js","pages/WordsPage.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { CSSTransition, TransitionGroup} from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport Spinner from '../Spinner/Spinner';\nimport pencil from '../../resources/pencil.png';\nimport star from '../../resources/star.png';\nimport fullStar from '../../resources/fullstar.png';\nimport './wordsTable.scss';\n\nconst WordsTable = ({\n    handleModifyModal, \n    searchedWord, \n    cuttedArrayOfWords, \n    selectedLetter, \n    setSelectedWord, \n    selectedWords, \n    selectedWord, \n    setSelectedWords, \n    onAddToFavorite, \n    loadingStatus, \n    isShowDate, \n    isShowTicks, \n    isReverseWords, \n    isBlured, \n    items}) => {\n\n    const [isChecked, setIsChecked] = useState(false);\n    const [unbluredWord, setUnbluredWord] = useState('');\n\n    const timerRef = useRef(null)\n\n    const handleUnblur = (word) => {\n\n        clearTimeout(timerRef.current);\n        setUnbluredWord(word);\n\n        timerRef.current = setTimeout(() => {\n            setUnbluredWord('')\n        }, 2000);\n\n    }\n    \n    useEffect(() => () => clearTimeout(timerRef.current), [])\n    \n    useEffect(() => {\n        if (!isShowTicks) {\n            setIsChecked(false)\n            setSelectedWords([]);\n        }\n        // eslint-disable-next-line\n    }, [isShowTicks])\n\n    useEffect(()=> {\n        if (selectedWords.length === 0) {\n            setIsChecked(false);\n        }\n    }, [selectedWords.length]);\n    \n    const handleClick = (word) => {\n        setSelectedWord(word)\n    }\n\n    const handleSelectAllClick = (event) => {\n        setIsChecked(event.target.checked);\n\n        if (event.target.checked) {\n            const newSelected = cuttedArrayOfWords.map((n) => n.id);\n            setSelectedWords(newSelected);\n            return;\n        }\n        \n        setSelectedWords([]);\n    };\n\n    const handleSelect = (id) => {\n\n        const selectedIndex = selectedWords.indexOf(id);\n\n        let newSelected = [];\n        \n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selectedWords, id);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selectedWords.slice(1));\n        } else if (selectedIndex === selectedWords.length - 1) {\n            newSelected = newSelected.concat(selectedWords.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selectedWords.slice(0, selectedIndex),\n                selectedWords.slice(selectedIndex + 1)\n            );\n        }\n        \n        setSelectedWords(newSelected);\n    }\n\n    const onFormattedDate = (date) => {\n        let normalDate = new Date(date)\n        \n        return `${normalDate.toLocaleTimeString()} ${normalDate.toLocaleDateString()}`;\n    }\n\n    const handleStarClick = (word) => {\n        onAddToFavorite(word)\n    }\n\n    \n\n    const elements = (array) => {\n        return array.map((item) => {\n\n            const isItemBlurred = isBlured && unbluredWord !== item.id;\n\n            return (\n                <CSSTransition \n                    timeout={500}\n                    key={item.id}\n                    classNames={{\n                        appear: 'word-appear',\n                        appearActive: 'word-appear-active',\n                        enter: 'word-enter',\n                        enterActive: 'word-enter-active',\n                        exit: 'word-exit',\n                        exitActive: 'word-exit-active'\n                    }}\n                >\n                    <tr \n                        className={selectedWord.id !== item.id ? 'word' : 'word activeWord'} \n                        onClick={() => handleClick(item)}\n                    >\n                        {isShowTicks ? \n                            <td className='wordsTable__ticks'>\n                                <input \n                                    checked={selectedWords.includes(item.id) || isChecked} \n                                    onChange={(e) => handleSelect(item.id)} \n                                    type='checkbox'\n                                />\n                            </td>\n                            :\n                            null\n                        }\n                        <td className='wordsTable__word'>\n                            {isReverseWords ? item.russian : item.english}\n                        </td> \n                        <td className='wordsTable__translate' style={isShowDate ? {'paddingRight': 0} : null}>\n                            <div className='wordsTable__translate-inner'>\n                                <div\n                                    onClick={() => handleUnblur(item.id)} \n                                    className={isItemBlurred ? 'blur' : ''}\n                                    >\n                                    {isReverseWords ? item.english : item.russian}\n                                </div> \n                                {!isShowDate ? \n                                <>\n                                    <div onClick={() => handleModifyModal()} className='wordsTable__translate-inner-pencil'>\n                                        <img src={pencil} alt='modify pencil'/>\n                                    </div> \n                                    <div \n                                        onClick={() => handleStarClick(item)} \n                                        className='wordsTable__translate-inner-star'>\n                                        {item.favorite ? \n                                            <img className='' src={fullStar} alt=\"full star\"/> : \n                                            <img src={star} alt=\"star\"/> \n                                        }\n                                    </div>\n                                </> : null\n                                }\n                            </div>\n                        </td>\n                        {isShowDate ? \n                            <td className='wordsTable__date'>\n                                <div className='wordsTable__translate-inner'>\n                                    {isShowDate ? onFormattedDate(item.date) : null}\n                                    <div onClick={() => handleModifyModal()} className='wordsTable__translate-inner-pencil'>\n                                        <img src={pencil} alt='modify pencil'/>\n                                    </div> \n                                    <div \n                                        onClick={() => handleStarClick(item)} \n                                        className='wordsTable__translate-inner-star'>\n                                        {item.favorite ? \n                                            <img className='' src={fullStar} alt=\"full star\"/> : \n                                            <img src={star} alt=\"star\"/> \n                                        }\n                                    </div>\n                                </div>\n                                \n                            </td> \n                            : \n                        null}\n                    </tr>\n                </CSSTransition>\n            )\n        })\n    }\n    \n    const table = () => {\n\n        if (items.length === 0) {\n            return (\n                <div className='emptyTable'>You have not added words yet!</div>\n            )\n        }\n\n        if ((cuttedArrayOfWords.length === 0 && selectedLetter.length > 0)) {\n            return (\n                <div className='emptyTable'>There are no words!</div>\n            )\n        }\n\n        if ((cuttedArrayOfWords.length === 0 && searchedWord.length > 0)) {\n            return (\n                <div className='emptyTable'>No searched word!</div>\n            )\n        }\n\n        return (\n            <div className='wordsTable__wrapper'>\n                <table className='wordsTable'>\n                    <thead>\n                        <tr>\n                            {isShowTicks ? \n                                <th className='wordsTable__ticks'>\n                                    <input type='checkbox' checked={isChecked} onChange={handleSelectAllClick}/>\n                                </th> \n                                :\n                                null\n                            }\n                            <th className='wordsTable__wordHeader'>\n                                {isReverseWords ? 'Russian words' : 'English words'}\n                            </th> \n                            <th className='wordsTable__translateHeader'>\n                                {isReverseWords ? 'English words' : 'Russian words'}\n                            </th>\n                            {isShowDate ? \n                                <th className='wordsTable__dateHeader'>\n                                    Date of adding\n                                </th> \n                                : \n                                null\n                            }\n                        </tr>\n                    </thead>\n                    <TransitionGroup component=\"tbody\">\n                        {elements(cuttedArrayOfWords)}\n                    </TransitionGroup>\n                </table>\n            </div>\n        )\n    }\n    \n    if (loadingStatus === \"loading\") {\n        return <Spinner/>;\n    } else if (loadingStatus === \"error\") {\n        return <div className='error'>Something went wrong, error from server</div>\n    }\n\n    return (\n        <>\n            {table()}\n        </>\n    )\n}\n\nWordsTable.propTypes = {\n    handleModifyModal: PropTypes.func.isRequired, \n    searchedWord: PropTypes.string.isRequired, \n    cuttedArrayOfWords: PropTypes.array.isRequired, \n    selectedLetter: PropTypes.string.isRequired, \n    setSelectedWord: PropTypes.func.isRequired, \n    selectedWords: PropTypes.array.isRequired, \n    selectedWord: PropTypes.object.isRequired, \n    setSelectedWords: PropTypes.func.isRequired, \n    onAddToFavorite: PropTypes.func.isRequired, \n    loadingStatus: PropTypes.string.isRequired, \n    isShowDate: PropTypes.bool, \n    isShowTicks: PropTypes.bool, \n    isReverseWords: PropTypes.bool, \n    isBlured: PropTypes.bool, \n    items: PropTypes.array.isRequired,\n}\n\nexport default WordsTable;","import {useDispatch, useSelector} from 'react-redux';\nimport {useEffect} from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport {deleteWord, deleteWords, addWord, modifyWord, setTotalPages, fetchWords, sortBy, activeSortTypeChanged, setWordsPerUpload, setPage, setLetter, setIsBlured, setIsShowDate, setIsReverseWords, setIsShowTicks} from '../store/slices/wordSlice';\nimport useAuth from '../hooks/use-auth';\nimport WordsTable from \"../components/WordsTable/WordsTable\";\nimport Page from './Page';\n\nconst WordsPage = () => {\n\n    const {wordsLoadingStatus, words, wordsPerUpload, sortType, currentPage, totalPages, letter, isBlured, isShowDate, isReverseWords, isShowTicks} = useSelector(state => state.words);\n\n    const dispatch = useDispatch();\n    const {isAuth, id} = useAuth();\n\n    const sortItems = [\n        { name: 'from new'},\n        { name: 'from old'},         \n        { name: 'a to z'},\n        { name: 'z to a'},\n        { name: 'а to я'},\n        { name: 'я to а'},\n    ];\n    \n    const numberOfWordsPerPage = [\n        { name: 30},\n        { name: 60},\n        { name: 90},      \n    ];\n\n    const linkToWords = {\n        firstUrl: 'users',\n        secondUrl: id,\n        thirdUrl: 'words'\n    }\n\n    useEffect(() => {\n        if (id !== null) {\n            dispatch(fetchWords(id));\n        }\n        // eslint-disable-next-line\n    }, [id]);\n\n    return  isAuth ? (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"words page\"\n                />\n                <title>Words</title>\n            </Helmet>\n            <Page\n                sortItems={sortItems}\n                sortType={sortType}\n                sortByFunction={sortBy}\n                activeSortTypeChanged={activeSortTypeChanged}\n                setNumberPerUpload={setWordsPerUpload}\n                numberPerUpload={wordsPerUpload}\n                currentPage={currentPage}\n                totalPages={totalPages}\n                setPage={setPage}\n                numberOfItemsPerPage={numberOfWordsPerPage}\n                address={linkToWords}\n                wordsLoadingStatus={wordsLoadingStatus}\n                deleteItem={deleteWord}\n                deleteItems={deleteWords}\n                add={addWord}\n                modify={modifyWord}\n                setTotalPages={setTotalPages}\n                TableComponent={WordsTable}\n                items={words}\n                letter={letter}\n                setLetter={setLetter}\n                isBlured={isBlured}\n                isShowDate={isShowDate}\n                isReverseWords={isReverseWords} \n                isShowTicks={isShowTicks}\n                setIsBlured={setIsBlured}\n                setIsShowDate={setIsShowDate}\n                setIsReverseWords={setIsReverseWords}\n                setIsShowTicks={setIsShowTicks}\n            />\n        </>\n    ) : null\n}\n\nexport default WordsPage;"],"names":["_ref","handleModifyModal","searchedWord","cuttedArrayOfWords","selectedLetter","setSelectedWord","selectedWords","selectedWord","setSelectedWords","onAddToFavorite","loadingStatus","isShowDate","isShowTicks","isReverseWords","isBlured","items","_useState","useState","_useState2","_slicedToArray","isChecked","setIsChecked","_useState3","_useState4","unbluredWord","setUnbluredWord","timerRef","useRef","useEffect","clearTimeout","current","length","handleSelectAllClick","event","target","checked","newSelected","map","n","id","onFormattedDate","date","normalDate","Date","concat","toLocaleTimeString","toLocaleDateString","handleStarClick","word","elements","array","item","isItemBlurred","_jsx","CSSTransition","timeout","classNames","appear","appearActive","enter","enterActive","exit","exitActive","children","_jsxs","className","onClick","includes","onChange","e","selectedIndex","indexOf","slice","handleSelect","type","russian","english","style","setTimeout","_Fragment","src","pencil","alt","favorite","fullStar","star","Spinner","TransitionGroup","component","_useSelector","useSelector","state","words","wordsLoadingStatus","wordsPerUpload","sortType","currentPage","totalPages","letter","dispatch","useDispatch","_useAuth","useAuth","isAuth","linkToWords","firstUrl","secondUrl","thirdUrl","fetchWords","Helmet","name","content","Page","sortItems","sortByFunction","sortBy","activeSortTypeChanged","setNumberPerUpload","setWordsPerUpload","numberPerUpload","setPage","numberOfItemsPerPage","address","deleteItem","deleteWord","deleteItems","deleteWords","add","addWord","modify","modifyWord","setTotalPages","TableComponent","WordsTable","setLetter","setIsBlured","setIsShowDate","setIsReverseWords","setIsShowTicks"],"sourceRoot":""}